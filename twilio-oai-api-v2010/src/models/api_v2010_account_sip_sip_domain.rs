/*
 * Twilio - Api
 *
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.20.3
 * Contact: support@twilio.com
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ApiV2010AccountSipSipDomain {
    /// The SID of the Account that created the resource
    #[serde(rename = "account_sid", skip_serializing_if = "Option::is_none")]
    pub account_sid: Option<String>,
    /// The API version used to process the call
    #[serde(rename = "api_version", skip_serializing_if = "Option::is_none")]
    pub api_version: Option<String>,
    /// The types of authentication mapped to the domain
    #[serde(rename = "auth_type", skip_serializing_if = "Option::is_none")]
    pub auth_type: Option<String>,
    /// The SID of the BYOC Trunk resource.
    #[serde(rename = "byoc_trunk_sid", skip_serializing_if = "Option::is_none")]
    pub byoc_trunk_sid: Option<String>,
    /// The RFC 2822 date and time in GMT that the resource was created
    #[serde(rename = "date_created", skip_serializing_if = "Option::is_none")]
    pub date_created: Option<String>,
    /// The RFC 2822 date and time in GMT that the resource was last updated
    #[serde(rename = "date_updated", skip_serializing_if = "Option::is_none")]
    pub date_updated: Option<String>,
    /// The unique address on Twilio to route SIP traffic
    #[serde(rename = "domain_name", skip_serializing_if = "Option::is_none")]
    pub domain_name: Option<String>,
    /// Whether an emergency caller sid is configured for the domain.
    #[serde(
        rename = "emergency_caller_sid",
        skip_serializing_if = "Option::is_none"
    )]
    pub emergency_caller_sid: Option<String>,
    /// Whether emergency calling is enabled for the domain.
    #[serde(
        rename = "emergency_calling_enabled",
        skip_serializing_if = "Option::is_none"
    )]
    pub emergency_calling_enabled: Option<bool>,
    /// The string that you assigned to describe the resource
    #[serde(rename = "friendly_name", skip_serializing_if = "Option::is_none")]
    pub friendly_name: Option<String>,
    /// Whether secure SIP is enabled for the domain
    #[serde(rename = "secure", skip_serializing_if = "Option::is_none")]
    pub secure: Option<bool>,
    /// The unique string that identifies the resource
    #[serde(rename = "sid", skip_serializing_if = "Option::is_none")]
    pub sid: Option<String>,
    /// Whether SIP registration is allowed
    #[serde(rename = "sip_registration", skip_serializing_if = "Option::is_none")]
    pub sip_registration: Option<bool>,
    /// A list mapping resources associated with the SIP Domain resource
    #[serde(rename = "subresource_uris", skip_serializing_if = "Option::is_none")]
    pub subresource_uris: Option<serde_json::Value>,
    /// The URI of the resource, relative to `https://api.twilio.com`
    #[serde(rename = "uri", skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
    /// The HTTP method used with voice_fallback_url
    #[serde(
        rename = "voice_fallback_method",
        skip_serializing_if = "Option::is_none"
    )]
    pub voice_fallback_method: Option<VoiceFallbackMethod>,
    /// The URL we call when an error occurs while executing TwiML
    #[serde(rename = "voice_fallback_url", skip_serializing_if = "Option::is_none")]
    pub voice_fallback_url: Option<String>,
    /// The HTTP method to use with voice_url
    #[serde(rename = "voice_method", skip_serializing_if = "Option::is_none")]
    pub voice_method: Option<VoiceMethod>,
    /// The HTTP method we use to call voice_status_callback_url
    #[serde(
        rename = "voice_status_callback_method",
        skip_serializing_if = "Option::is_none"
    )]
    pub voice_status_callback_method: Option<VoiceStatusCallbackMethod>,
    /// The URL that we call with status updates
    #[serde(
        rename = "voice_status_callback_url",
        skip_serializing_if = "Option::is_none"
    )]
    pub voice_status_callback_url: Option<String>,
    /// The URL we call when receiving a call
    #[serde(rename = "voice_url", skip_serializing_if = "Option::is_none")]
    pub voice_url: Option<String>,
}

impl ApiV2010AccountSipSipDomain {
    pub fn new() -> ApiV2010AccountSipSipDomain {
        ApiV2010AccountSipSipDomain {
            account_sid: None,
            api_version: None,
            auth_type: None,
            byoc_trunk_sid: None,
            date_created: None,
            date_updated: None,
            domain_name: None,
            emergency_caller_sid: None,
            emergency_calling_enabled: None,
            friendly_name: None,
            secure: None,
            sid: None,
            sip_registration: None,
            subresource_uris: None,
            uri: None,
            voice_fallback_method: None,
            voice_fallback_url: None,
            voice_method: None,
            voice_status_callback_method: None,
            voice_status_callback_url: None,
            voice_url: None,
        }
    }
}

/// The HTTP method used with voice_fallback_url
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum VoiceFallbackMethod {
    #[serde(rename = "HEAD")]
    HEAD,
    #[serde(rename = "GET")]
    GET,
    #[serde(rename = "POST")]
    POST,
    #[serde(rename = "PATCH")]
    PATCH,
    #[serde(rename = "PUT")]
    PUT,
    #[serde(rename = "DELETE")]
    DELETE,
}
/// The HTTP method to use with voice_url
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum VoiceMethod {
    #[serde(rename = "HEAD")]
    HEAD,
    #[serde(rename = "GET")]
    GET,
    #[serde(rename = "POST")]
    POST,
    #[serde(rename = "PATCH")]
    PATCH,
    #[serde(rename = "PUT")]
    PUT,
    #[serde(rename = "DELETE")]
    DELETE,
}
/// The HTTP method we use to call voice_status_callback_url
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum VoiceStatusCallbackMethod {
    #[serde(rename = "HEAD")]
    HEAD,
    #[serde(rename = "GET")]
    GET,
    #[serde(rename = "POST")]
    POST,
    #[serde(rename = "PATCH")]
    PATCH,
    #[serde(rename = "PUT")]
    PUT,
    #[serde(rename = "DELETE")]
    DELETE,
}
