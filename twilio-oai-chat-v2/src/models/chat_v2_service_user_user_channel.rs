/*
 * Twilio - Chat
 *
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.20.2
 * Contact: support@twilio.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ChatV2ServiceUserUserChannel {
    /// The SID of the Account that created the resource
    #[serde(rename = "account_sid", skip_serializing_if = "Option::is_none")]
    pub account_sid: Option<String>,
    /// The SID of the Channel the resource belongs to
    #[serde(rename = "channel_sid", skip_serializing_if = "Option::is_none")]
    pub channel_sid: Option<String>,
    /// The index of the last Message in the Channel the Member has read
    #[serde(rename = "last_consumed_message_index", skip_serializing_if = "Option::is_none")]
    pub last_consumed_message_index: Option<i32>,
    /// Absolute URLs to access the Members, Messages , Invites and, if it exists, the last Message for the Channel
    #[serde(rename = "links", skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
    /// The SID of the User as a Member in the Channel
    #[serde(rename = "member_sid", skip_serializing_if = "Option::is_none")]
    pub member_sid: Option<String>,
    /// The push notification level of the User for the Channel
    #[serde(rename = "notification_level", skip_serializing_if = "Option::is_none")]
    pub notification_level: Option<NotificationLevel>,
    /// The SID of the Service that the resource is associated with
    #[serde(rename = "service_sid", skip_serializing_if = "Option::is_none")]
    pub service_sid: Option<String>,
    /// The status of the User on the Channel
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    /// The number of unread Messages in the Channel for the User
    #[serde(rename = "unread_messages_count", skip_serializing_if = "Option::is_none")]
    pub unread_messages_count: Option<i32>,
    /// The absolute URL of the resource
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    /// The SID of the User the User Channel belongs to
    #[serde(rename = "user_sid", skip_serializing_if = "Option::is_none")]
    pub user_sid: Option<String>,
}

impl ChatV2ServiceUserUserChannel {
    pub fn new() -> ChatV2ServiceUserUserChannel {
        ChatV2ServiceUserUserChannel {
            account_sid: None,
            channel_sid: None,
            last_consumed_message_index: None,
            links: None,
            member_sid: None,
            notification_level: None,
            service_sid: None,
            status: None,
            unread_messages_count: None,
            url: None,
            user_sid: None,
        }
    }
}

/// The push notification level of the User for the Channel
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum NotificationLevel {
    #[serde(rename = "default")]
    Default,
    #[serde(rename = "muted")]
    Muted,
}
/// The status of the User on the Channel
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "joined")]
    Joined,
    #[serde(rename = "invited")]
    Invited,
    #[serde(rename = "not_participating")]
    NotParticipating,
}

