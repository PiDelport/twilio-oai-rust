/*
 * Twilio - Conversations
 *
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.20.3
 * Contact: support@twilio.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ConversationsV1ParticipantConversation {
    /// The unique ID of the Account responsible for this conversation.
    #[serde(rename = "account_sid", skip_serializing_if = "Option::is_none")]
    pub account_sid: Option<String>,
    /// The unique ID of the Conversation Service this conversation belongs to.
    #[serde(rename = "chat_service_sid", skip_serializing_if = "Option::is_none")]
    pub chat_service_sid: Option<String>,
    /// An optional string metadata field you can use to store any data you wish.
    #[serde(rename = "conversation_attributes", skip_serializing_if = "Option::is_none")]
    pub conversation_attributes: Option<String>,
    /// Creator of this conversation.
    #[serde(rename = "conversation_created_by", skip_serializing_if = "Option::is_none")]
    pub conversation_created_by: Option<String>,
    /// The date that this conversation was created.
    #[serde(rename = "conversation_date_created", skip_serializing_if = "Option::is_none")]
    pub conversation_date_created: Option<String>,
    /// The date that this conversation was last updated.
    #[serde(rename = "conversation_date_updated", skip_serializing_if = "Option::is_none")]
    pub conversation_date_updated: Option<String>,
    /// The human-readable name of this conversation.
    #[serde(rename = "conversation_friendly_name", skip_serializing_if = "Option::is_none")]
    pub conversation_friendly_name: Option<String>,
    /// The unique ID of the Conversation this Participant belongs to.
    #[serde(rename = "conversation_sid", skip_serializing_if = "Option::is_none")]
    pub conversation_sid: Option<String>,
    /// The current state of this User Conversation
    #[serde(rename = "conversation_state", skip_serializing_if = "Option::is_none")]
    pub conversation_state: Option<ConversationState>,
    /// Timer date values for this conversation.
    #[serde(rename = "conversation_timers", skip_serializing_if = "Option::is_none")]
    pub conversation_timers: Option<serde_json::Value>,
    /// An application-defined string that uniquely identifies the Conversation resource
    #[serde(rename = "conversation_unique_name", skip_serializing_if = "Option::is_none")]
    pub conversation_unique_name: Option<String>,
    /// Absolute URLs to access the participant and conversation of this Participant Conversation.
    #[serde(rename = "links", skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
    /// A unique string identifier for the conversation participant as Conversation User.
    #[serde(rename = "participant_identity", skip_serializing_if = "Option::is_none")]
    pub participant_identity: Option<String>,
    /// Information about how this participant exchanges messages with the conversation.
    #[serde(rename = "participant_messaging_binding", skip_serializing_if = "Option::is_none")]
    pub participant_messaging_binding: Option<serde_json::Value>,
    /// The unique ID of the Participant.
    #[serde(rename = "participant_sid", skip_serializing_if = "Option::is_none")]
    pub participant_sid: Option<String>,
    /// The unique ID for the conversation participant as Conversation User.
    #[serde(rename = "participant_user_sid", skip_serializing_if = "Option::is_none")]
    pub participant_user_sid: Option<String>,
}

impl ConversationsV1ParticipantConversation {
    pub fn new() -> ConversationsV1ParticipantConversation {
        ConversationsV1ParticipantConversation {
            account_sid: None,
            chat_service_sid: None,
            conversation_attributes: None,
            conversation_created_by: None,
            conversation_date_created: None,
            conversation_date_updated: None,
            conversation_friendly_name: None,
            conversation_sid: None,
            conversation_state: None,
            conversation_timers: None,
            conversation_unique_name: None,
            links: None,
            participant_identity: None,
            participant_messaging_binding: None,
            participant_sid: None,
            participant_user_sid: None,
        }
    }
}

/// The current state of this User Conversation
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ConversationState {
    #[serde(rename = "inactive")]
    Inactive,
    #[serde(rename = "active")]
    Active,
    #[serde(rename = "closed")]
    Closed,
}

