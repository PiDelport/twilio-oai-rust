/*
 * Twilio - Conversations
 *
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.20.3
 * Contact: support@twilio.com
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ConversationsV1UserUserConversation {
    /// The unique ID of the Account responsible for this conversation.
    #[serde(rename = "account_sid", skip_serializing_if = "Option::is_none")]
    pub account_sid: Option<String>,
    /// An optional string metadata field you can use to store any data you wish.
    #[serde(rename = "attributes", skip_serializing_if = "Option::is_none")]
    pub attributes: Option<String>,
    /// The unique ID of the Conversation Service this conversation belongs to.
    #[serde(rename = "chat_service_sid", skip_serializing_if = "Option::is_none")]
    pub chat_service_sid: Option<String>,
    /// The unique ID of the Conversation for this User Conversation.
    #[serde(rename = "conversation_sid", skip_serializing_if = "Option::is_none")]
    pub conversation_sid: Option<String>,
    /// The current state of this User Conversation
    #[serde(rename = "conversation_state", skip_serializing_if = "Option::is_none")]
    pub conversation_state: Option<ConversationState>,
    /// Creator of this conversation.
    #[serde(rename = "created_by", skip_serializing_if = "Option::is_none")]
    pub created_by: Option<String>,
    /// The date that this conversation was created.
    #[serde(rename = "date_created", skip_serializing_if = "Option::is_none")]
    pub date_created: Option<String>,
    /// The date that this conversation was last updated.
    #[serde(rename = "date_updated", skip_serializing_if = "Option::is_none")]
    pub date_updated: Option<String>,
    /// The human-readable name of this conversation.
    #[serde(rename = "friendly_name", skip_serializing_if = "Option::is_none")]
    pub friendly_name: Option<String>,
    /// The index of the last read Message .
    #[serde(
        rename = "last_read_message_index",
        skip_serializing_if = "Option::is_none"
    )]
    pub last_read_message_index: Option<i32>,
    /// Absolute URLs to access the participant and conversation of this user conversation.
    #[serde(rename = "links", skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
    /// The Notification Level of this User Conversation.
    #[serde(rename = "notification_level", skip_serializing_if = "Option::is_none")]
    pub notification_level: Option<NotificationLevel>,
    /// Participant Sid.
    #[serde(rename = "participant_sid", skip_serializing_if = "Option::is_none")]
    pub participant_sid: Option<String>,
    /// Timer date values for this conversation.
    #[serde(rename = "timers", skip_serializing_if = "Option::is_none")]
    pub timers: Option<serde_json::Value>,
    /// An application-defined string that uniquely identifies the Conversation resource.
    #[serde(rename = "unique_name", skip_serializing_if = "Option::is_none")]
    pub unique_name: Option<String>,
    /// The number of unread Messages in the Conversation.
    #[serde(
        rename = "unread_messages_count",
        skip_serializing_if = "Option::is_none"
    )]
    pub unread_messages_count: Option<i32>,
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    /// The unique ID for the User.
    #[serde(rename = "user_sid", skip_serializing_if = "Option::is_none")]
    pub user_sid: Option<String>,
}

impl ConversationsV1UserUserConversation {
    pub fn new() -> ConversationsV1UserUserConversation {
        ConversationsV1UserUserConversation {
            account_sid: None,
            attributes: None,
            chat_service_sid: None,
            conversation_sid: None,
            conversation_state: None,
            created_by: None,
            date_created: None,
            date_updated: None,
            friendly_name: None,
            last_read_message_index: None,
            links: None,
            notification_level: None,
            participant_sid: None,
            timers: None,
            unique_name: None,
            unread_messages_count: None,
            url: None,
            user_sid: None,
        }
    }
}

/// The current state of this User Conversation
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ConversationState {
    #[serde(rename = "inactive")]
    Inactive,
    #[serde(rename = "active")]
    Active,
    #[serde(rename = "closed")]
    Closed,
}
/// The Notification Level of this User Conversation.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum NotificationLevel {
    #[serde(rename = "default")]
    Default,
    #[serde(rename = "muted")]
    Muted,
}
