/*
 * Twilio - Flex
 *
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.20.2
 * Contact: support@twilio.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct FlexV1Configuration {
    /// The SID of the Account that created the resource
    #[serde(rename = "account_sid", skip_serializing_if = "Option::is_none")]
    pub account_sid: Option<String>,
    /// An object that contains application-specific data
    #[serde(rename = "attributes", skip_serializing_if = "Option::is_none")]
    pub attributes: Option<serde_json::Value>,
    /// Whether call recording is enabled
    #[serde(rename = "call_recording_enabled", skip_serializing_if = "Option::is_none")]
    pub call_recording_enabled: Option<bool>,
    /// The call recording webhook URL
    #[serde(rename = "call_recording_webhook_url", skip_serializing_if = "Option::is_none")]
    pub call_recording_webhook_url: Option<String>,
    /// The SID of the chat service this user belongs to
    #[serde(rename = "chat_service_instance_sid", skip_serializing_if = "Option::is_none")]
    pub chat_service_instance_sid: Option<String>,
    /// An object that contains the CRM attributes
    #[serde(rename = "crm_attributes", skip_serializing_if = "Option::is_none")]
    pub crm_attributes: Option<serde_json::Value>,
    /// The CRM Callback URL
    #[serde(rename = "crm_callback_url", skip_serializing_if = "Option::is_none")]
    pub crm_callback_url: Option<String>,
    /// Whether CRM is present for Flex
    #[serde(rename = "crm_enabled", skip_serializing_if = "Option::is_none")]
    pub crm_enabled: Option<bool>,
    /// The CRM Fallback URL
    #[serde(rename = "crm_fallback_url", skip_serializing_if = "Option::is_none")]
    pub crm_fallback_url: Option<String>,
    /// The CRM Type
    #[serde(rename = "crm_type", skip_serializing_if = "Option::is_none")]
    pub crm_type: Option<String>,
    /// The ISO 8601 date and time in GMT when the Configuration resource was created
    #[serde(rename = "date_created", skip_serializing_if = "Option::is_none")]
    pub date_created: Option<String>,
    /// The ISO 8601 date and time in GMT when the Configuration resource was last updated
    #[serde(rename = "date_updated", skip_serializing_if = "Option::is_none")]
    pub date_updated: Option<String>,
    /// The SID of the Flex service instance
    #[serde(rename = "flex_service_instance_sid", skip_serializing_if = "Option::is_none")]
    pub flex_service_instance_sid: Option<String>,
    /// A list of objects that contain the configurations for the Integrations supported in this configuration
    #[serde(rename = "integrations", skip_serializing_if = "Option::is_none")]
    pub integrations: Option<Vec<serde_json::Value>>,
    /// Configurable parameters for Markdown
    #[serde(rename = "markdown", skip_serializing_if = "Option::is_none")]
    pub markdown: Option<serde_json::Value>,
    /// The SID of the Messaging service instance
    #[serde(rename = "messaging_service_instance_sid", skip_serializing_if = "Option::is_none")]
    pub messaging_service_instance_sid: Option<String>,
    /// Configurable parameters for Notifications
    #[serde(rename = "notifications", skip_serializing_if = "Option::is_none")]
    pub notifications: Option<serde_json::Value>,
    /// The list of outbound call flows
    #[serde(rename = "outbound_call_flows", skip_serializing_if = "Option::is_none")]
    pub outbound_call_flows: Option<serde_json::Value>,
    /// The plugin service attributes
    #[serde(rename = "plugin_service_attributes", skip_serializing_if = "Option::is_none")]
    pub plugin_service_attributes: Option<serde_json::Value>,
    /// Whether the plugin service enabled
    #[serde(rename = "plugin_service_enabled", skip_serializing_if = "Option::is_none")]
    pub plugin_service_enabled: Option<bool>,
    /// The list of public attributes
    #[serde(rename = "public_attributes", skip_serializing_if = "Option::is_none")]
    pub public_attributes: Option<serde_json::Value>,
    /// Configurable parameters for Queues Statistics
    #[serde(rename = "queue_stats_configuration", skip_serializing_if = "Option::is_none")]
    pub queue_stats_configuration: Option<serde_json::Value>,
    /// The URL where the Flex instance is hosted
    #[serde(rename = "runtime_domain", skip_serializing_if = "Option::is_none")]
    pub runtime_domain: Option<String>,
    /// The list of serverless service SIDs
    #[serde(rename = "serverless_service_sids", skip_serializing_if = "Option::is_none")]
    pub serverless_service_sids: Option<Vec<String>>,
    /// The Flex Service version
    #[serde(rename = "service_version", skip_serializing_if = "Option::is_none")]
    pub service_version: Option<String>,
    /// The status of the Flex onboarding
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    /// The TaskRouter SID of the offline activity
    #[serde(rename = "taskrouter_offline_activity_sid", skip_serializing_if = "Option::is_none")]
    pub taskrouter_offline_activity_sid: Option<String>,
    /// The Skill description for TaskRouter workers
    #[serde(rename = "taskrouter_skills", skip_serializing_if = "Option::is_none")]
    pub taskrouter_skills: Option<Vec<serde_json::Value>>,
    /// The SID of the TaskRouter Target TaskQueue
    #[serde(rename = "taskrouter_target_taskqueue_sid", skip_serializing_if = "Option::is_none")]
    pub taskrouter_target_taskqueue_sid: Option<String>,
    /// The SID of the TaskRouter target Workflow
    #[serde(rename = "taskrouter_target_workflow_sid", skip_serializing_if = "Option::is_none")]
    pub taskrouter_target_workflow_sid: Option<String>,
    /// The list of TaskRouter TaskQueues
    #[serde(rename = "taskrouter_taskqueues", skip_serializing_if = "Option::is_none")]
    pub taskrouter_taskqueues: Option<Vec<serde_json::Value>>,
    /// The TaskRouter Worker attributes
    #[serde(rename = "taskrouter_worker_attributes", skip_serializing_if = "Option::is_none")]
    pub taskrouter_worker_attributes: Option<serde_json::Value>,
    /// The TaskRouter default channel capacities and availability for workers
    #[serde(rename = "taskrouter_worker_channels", skip_serializing_if = "Option::is_none")]
    pub taskrouter_worker_channels: Option<serde_json::Value>,
    /// The SID of the TaskRouter Workspace
    #[serde(rename = "taskrouter_workspace_sid", skip_serializing_if = "Option::is_none")]
    pub taskrouter_workspace_sid: Option<String>,
    /// The object that describes Flex UI characteristics and settings
    #[serde(rename = "ui_attributes", skip_serializing_if = "Option::is_none")]
    pub ui_attributes: Option<serde_json::Value>,
    /// The object that defines the NPM packages and versions to be used in Hosted Flex
    #[serde(rename = "ui_dependencies", skip_serializing_if = "Option::is_none")]
    pub ui_dependencies: Option<serde_json::Value>,
    /// The primary language of the Flex UI
    #[serde(rename = "ui_language", skip_serializing_if = "Option::is_none")]
    pub ui_language: Option<String>,
    /// The Pinned UI version
    #[serde(rename = "ui_version", skip_serializing_if = "Option::is_none")]
    pub ui_version: Option<String>,
    /// The absolute URL of the Configuration resource
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

impl FlexV1Configuration {
    pub fn new() -> FlexV1Configuration {
        FlexV1Configuration {
            account_sid: None,
            attributes: None,
            call_recording_enabled: None,
            call_recording_webhook_url: None,
            chat_service_instance_sid: None,
            crm_attributes: None,
            crm_callback_url: None,
            crm_enabled: None,
            crm_fallback_url: None,
            crm_type: None,
            date_created: None,
            date_updated: None,
            flex_service_instance_sid: None,
            integrations: None,
            markdown: None,
            messaging_service_instance_sid: None,
            notifications: None,
            outbound_call_flows: None,
            plugin_service_attributes: None,
            plugin_service_enabled: None,
            public_attributes: None,
            queue_stats_configuration: None,
            runtime_domain: None,
            serverless_service_sids: None,
            service_version: None,
            status: None,
            taskrouter_offline_activity_sid: None,
            taskrouter_skills: None,
            taskrouter_target_taskqueue_sid: None,
            taskrouter_target_workflow_sid: None,
            taskrouter_taskqueues: None,
            taskrouter_worker_attributes: None,
            taskrouter_worker_channels: None,
            taskrouter_workspace_sid: None,
            ui_attributes: None,
            ui_dependencies: None,
            ui_language: None,
            ui_version: None,
            url: None,
        }
    }
}

/// The status of the Flex onboarding
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "ok")]
    Ok,
    #[serde(rename = "inprogress")]
    Inprogress,
    #[serde(rename = "notstarted")]
    Notstarted,
}

