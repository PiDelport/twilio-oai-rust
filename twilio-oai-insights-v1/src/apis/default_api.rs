/*
 * Twilio - Insights
 *
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.20.2
 * Contact: support@twilio.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method `fetch_call`
#[derive(Clone, Debug, Default)]
pub struct FetchCallParams {
    pub sid: String
}

/// struct for passing parameters to the method `fetch_summary`
#[derive(Clone, Debug, Default)]
pub struct FetchSummaryParams {
    pub call_sid: String,
    pub processing_state: Option<String>
}

/// struct for passing parameters to the method `fetch_video_participant_summary`
#[derive(Clone, Debug, Default)]
pub struct FetchVideoParticipantSummaryParams {
    /// The SID of the Room resource.
    pub room_sid: String,
    /// The SID of the Participant resource.
    pub participant_sid: String
}

/// struct for passing parameters to the method `fetch_video_room_summary`
#[derive(Clone, Debug, Default)]
pub struct FetchVideoRoomSummaryParams {
    /// The SID of the Room resource.
    pub room_sid: String
}

/// struct for passing parameters to the method `list_call_summaries`
#[derive(Clone, Debug, Default)]
pub struct ListCallSummariesParams {
    pub from: Option<Vec<String>>,
    pub to: Option<Vec<String>>,
    pub from_carrier: Option<Vec<String>>,
    pub to_carrier: Option<Vec<String>>,
    pub from_country_code: Option<Vec<String>>,
    pub to_country_code: Option<Vec<String>>,
    pub branded: Option<bool>,
    pub verified_caller: Option<bool>,
    pub has_tag: Option<bool>,
    pub start_time: Option<String>,
    pub end_time: Option<String>,
    pub call_type: Option<Vec<String>>,
    pub call_state: Option<Vec<String>>,
    pub direction: Option<Vec<String>>,
    pub processing_state: Option<String>,
    pub sort_by: Option<String>,
    pub subaccount: Option<String>,
    pub abnormal_session: Option<bool>,
    /// How many resources to return in each list page. The default is 50, and the maximum is 1000.
    pub page_size: Option<i32>
}

/// struct for passing parameters to the method `list_event`
#[derive(Clone, Debug, Default)]
pub struct ListEventParams {
    pub call_sid: String,
    pub edge: Option<String>,
    /// How many resources to return in each list page. The default is 50, and the maximum is 1000.
    pub page_size: Option<i32>
}

/// struct for passing parameters to the method `list_metric`
#[derive(Clone, Debug, Default)]
pub struct ListMetricParams {
    pub call_sid: String,
    pub edge: Option<String>,
    pub direction: Option<String>,
    /// How many resources to return in each list page. The default is 50, and the maximum is 1000.
    pub page_size: Option<i32>
}

/// struct for passing parameters to the method `list_video_participant_summary`
#[derive(Clone, Debug, Default)]
pub struct ListVideoParticipantSummaryParams {
    /// The SID of the Room resource.
    pub room_sid: String,
    /// How many resources to return in each list page. The default is 50, and the maximum is 1000.
    pub page_size: Option<i32>
}

/// struct for passing parameters to the method `list_video_room_summary`
#[derive(Clone, Debug, Default)]
pub struct ListVideoRoomSummaryParams {
    /// Type of room. Can be `go`, `peer_to_peer`, `group`, or `group_small`.
    pub room_type: Option<Vec<String>>,
    /// Codecs used by participants in the room. Can be `VP8`, `H264`, or `VP9`.
    pub codec: Option<Vec<String>>,
    /// Room friendly name.
    pub room_name: Option<String>,
    /// Only read rooms that started on or after this ISO 8601 timestamp.
    pub created_after: Option<String>,
    /// Only read rooms that started before this ISO 8601 timestamp.
    pub created_before: Option<String>,
    /// How many resources to return in each list page. The default is 50, and the maximum is 1000.
    pub page_size: Option<i32>
}


/// struct for typed successes of method `fetch_call`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchCallSuccess {
    Status200(crate::models::InsightsV1Call),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `fetch_summary`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchSummarySuccess {
    Status200(crate::models::InsightsV1CallSummary),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `fetch_video_participant_summary`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchVideoParticipantSummarySuccess {
    Status200(crate::models::InsightsV1VideoRoomSummaryVideoParticipantSummary),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `fetch_video_room_summary`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchVideoRoomSummarySuccess {
    Status200(crate::models::InsightsV1VideoRoomSummary),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `list_call_summaries`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListCallSummariesSuccess {
    Status200(crate::models::ListCallSummariesResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `list_event`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListEventSuccess {
    Status200(crate::models::ListEventResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `list_metric`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListMetricSuccess {
    Status200(crate::models::ListMetricResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `list_video_participant_summary`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListVideoParticipantSummarySuccess {
    Status200(crate::models::ListVideoParticipantSummaryResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `list_video_room_summary`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListVideoRoomSummarySuccess {
    Status200(crate::models::ListVideoRoomSummaryResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `fetch_call`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchCallError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `fetch_summary`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchSummaryError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `fetch_video_participant_summary`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchVideoParticipantSummaryError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `fetch_video_room_summary`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchVideoRoomSummaryError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `list_call_summaries`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListCallSummariesError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `list_event`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListEventError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `list_metric`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListMetricError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `list_video_participant_summary`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListVideoParticipantSummaryError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `list_video_room_summary`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListVideoRoomSummaryError {
    UnknownValue(serde_json::Value),
}


pub async fn fetch_call(configuration: &configuration::Configuration, params: FetchCallParams) -> Result<ResponseContent<FetchCallSuccess>, Error<FetchCallError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let sid = params.sid;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/Voice/{Sid}", local_var_configuration.base_path, Sid=crate::apis::urlencode(sid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<FetchCallSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<FetchCallError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn fetch_summary(configuration: &configuration::Configuration, params: FetchSummaryParams) -> Result<ResponseContent<FetchSummarySuccess>, Error<FetchSummaryError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let call_sid = params.call_sid;
    let processing_state = params.processing_state;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/Voice/{CallSid}/Summary", local_var_configuration.base_path, CallSid=crate::apis::urlencode(call_sid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = processing_state {
        local_var_req_builder = local_var_req_builder.query(&[("ProcessingState", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<FetchSummarySuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<FetchSummaryError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get Video Log Analyzer data for a Room Participant.
pub async fn fetch_video_participant_summary(configuration: &configuration::Configuration, params: FetchVideoParticipantSummaryParams) -> Result<ResponseContent<FetchVideoParticipantSummarySuccess>, Error<FetchVideoParticipantSummaryError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let room_sid = params.room_sid;
    let participant_sid = params.participant_sid;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/Video/Rooms/{RoomSid}/Participants/{ParticipantSid}", local_var_configuration.base_path, RoomSid=crate::apis::urlencode(room_sid), ParticipantSid=crate::apis::urlencode(participant_sid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<FetchVideoParticipantSummarySuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<FetchVideoParticipantSummaryError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get Video Log Analyzer data for a Room.
pub async fn fetch_video_room_summary(configuration: &configuration::Configuration, params: FetchVideoRoomSummaryParams) -> Result<ResponseContent<FetchVideoRoomSummarySuccess>, Error<FetchVideoRoomSummaryError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let room_sid = params.room_sid;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/Video/Rooms/{RoomSid}", local_var_configuration.base_path, RoomSid=crate::apis::urlencode(room_sid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<FetchVideoRoomSummarySuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<FetchVideoRoomSummaryError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn list_call_summaries(configuration: &configuration::Configuration, params: ListCallSummariesParams) -> Result<ResponseContent<ListCallSummariesSuccess>, Error<ListCallSummariesError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let from = params.from;
    let to = params.to;
    let from_carrier = params.from_carrier;
    let to_carrier = params.to_carrier;
    let from_country_code = params.from_country_code;
    let to_country_code = params.to_country_code;
    let branded = params.branded;
    let verified_caller = params.verified_caller;
    let has_tag = params.has_tag;
    let start_time = params.start_time;
    let end_time = params.end_time;
    let call_type = params.call_type;
    let call_state = params.call_state;
    let direction = params.direction;
    let processing_state = params.processing_state;
    let sort_by = params.sort_by;
    let subaccount = params.subaccount;
    let abnormal_session = params.abnormal_session;
    let page_size = params.page_size;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/Voice/Summaries", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = from {
        local_var_req_builder = local_var_req_builder.query(&[("From", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]);
    }
    if let Some(ref local_var_str) = to {
        local_var_req_builder = local_var_req_builder.query(&[("To", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]);
    }
    if let Some(ref local_var_str) = from_carrier {
        local_var_req_builder = local_var_req_builder.query(&[("FromCarrier", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]);
    }
    if let Some(ref local_var_str) = to_carrier {
        local_var_req_builder = local_var_req_builder.query(&[("ToCarrier", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]);
    }
    if let Some(ref local_var_str) = from_country_code {
        local_var_req_builder = local_var_req_builder.query(&[("FromCountryCode", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]);
    }
    if let Some(ref local_var_str) = to_country_code {
        local_var_req_builder = local_var_req_builder.query(&[("ToCountryCode", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]);
    }
    if let Some(ref local_var_str) = branded {
        local_var_req_builder = local_var_req_builder.query(&[("Branded", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = verified_caller {
        local_var_req_builder = local_var_req_builder.query(&[("VerifiedCaller", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = has_tag {
        local_var_req_builder = local_var_req_builder.query(&[("HasTag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = start_time {
        local_var_req_builder = local_var_req_builder.query(&[("StartTime", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = end_time {
        local_var_req_builder = local_var_req_builder.query(&[("EndTime", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = call_type {
        local_var_req_builder = local_var_req_builder.query(&[("CallType", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]);
    }
    if let Some(ref local_var_str) = call_state {
        local_var_req_builder = local_var_req_builder.query(&[("CallState", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]);
    }
    if let Some(ref local_var_str) = direction {
        local_var_req_builder = local_var_req_builder.query(&[("Direction", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]);
    }
    if let Some(ref local_var_str) = processing_state {
        local_var_req_builder = local_var_req_builder.query(&[("ProcessingState", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = sort_by {
        local_var_req_builder = local_var_req_builder.query(&[("SortBy", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = subaccount {
        local_var_req_builder = local_var_req_builder.query(&[("Subaccount", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = abnormal_session {
        local_var_req_builder = local_var_req_builder.query(&[("AbnormalSession", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page_size {
        local_var_req_builder = local_var_req_builder.query(&[("PageSize", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<ListCallSummariesSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<ListCallSummariesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn list_event(configuration: &configuration::Configuration, params: ListEventParams) -> Result<ResponseContent<ListEventSuccess>, Error<ListEventError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let call_sid = params.call_sid;
    let edge = params.edge;
    let page_size = params.page_size;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/Voice/{CallSid}/Events", local_var_configuration.base_path, CallSid=crate::apis::urlencode(call_sid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = edge {
        local_var_req_builder = local_var_req_builder.query(&[("Edge", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page_size {
        local_var_req_builder = local_var_req_builder.query(&[("PageSize", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<ListEventSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<ListEventError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn list_metric(configuration: &configuration::Configuration, params: ListMetricParams) -> Result<ResponseContent<ListMetricSuccess>, Error<ListMetricError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let call_sid = params.call_sid;
    let edge = params.edge;
    let direction = params.direction;
    let page_size = params.page_size;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/Voice/{CallSid}/Metrics", local_var_configuration.base_path, CallSid=crate::apis::urlencode(call_sid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = edge {
        local_var_req_builder = local_var_req_builder.query(&[("Edge", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = direction {
        local_var_req_builder = local_var_req_builder.query(&[("Direction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page_size {
        local_var_req_builder = local_var_req_builder.query(&[("PageSize", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<ListMetricSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<ListMetricError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get a list of room participants.
pub async fn list_video_participant_summary(configuration: &configuration::Configuration, params: ListVideoParticipantSummaryParams) -> Result<ResponseContent<ListVideoParticipantSummarySuccess>, Error<ListVideoParticipantSummaryError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let room_sid = params.room_sid;
    let page_size = params.page_size;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/Video/Rooms/{RoomSid}/Participants", local_var_configuration.base_path, RoomSid=crate::apis::urlencode(room_sid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = page_size {
        local_var_req_builder = local_var_req_builder.query(&[("PageSize", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<ListVideoParticipantSummarySuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<ListVideoParticipantSummaryError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get a list of Programmable Video Rooms.
pub async fn list_video_room_summary(configuration: &configuration::Configuration, params: ListVideoRoomSummaryParams) -> Result<ResponseContent<ListVideoRoomSummarySuccess>, Error<ListVideoRoomSummaryError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let room_type = params.room_type;
    let codec = params.codec;
    let room_name = params.room_name;
    let created_after = params.created_after;
    let created_before = params.created_before;
    let page_size = params.page_size;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/Video/Rooms", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = room_type {
        local_var_req_builder = local_var_req_builder.query(&[("RoomType", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]);
    }
    if let Some(ref local_var_str) = codec {
        local_var_req_builder = local_var_req_builder.query(&[("Codec", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]);
    }
    if let Some(ref local_var_str) = room_name {
        local_var_req_builder = local_var_req_builder.query(&[("RoomName", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created_after {
        local_var_req_builder = local_var_req_builder.query(&[("CreatedAfter", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created_before {
        local_var_req_builder = local_var_req_builder.query(&[("CreatedBefore", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page_size {
        local_var_req_builder = local_var_req_builder.query(&[("PageSize", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<ListVideoRoomSummarySuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<ListVideoRoomSummaryError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

