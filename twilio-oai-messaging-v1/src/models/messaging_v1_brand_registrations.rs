/*
 * Twilio - Messaging
 *
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.20.3
 * Contact: support@twilio.com
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct MessagingV1BrandRegistrations {
    /// A2P Messaging Profile Bundle BundleSid
    #[serde(
        rename = "a2p_profile_bundle_sid",
        skip_serializing_if = "Option::is_none"
    )]
    pub a2p_profile_bundle_sid: Option<String>,
    /// The SID of the Account that created the resource
    #[serde(rename = "account_sid", skip_serializing_if = "Option::is_none")]
    pub account_sid: Option<String>,
    /// Brand score
    #[serde(rename = "brand_score", skip_serializing_if = "Option::is_none")]
    pub brand_score: Option<i32>,
    /// Type of brand. One of: \"STANDARD\", \"STARTER\".
    #[serde(rename = "brand_type", skip_serializing_if = "Option::is_none")]
    pub brand_type: Option<String>,
    /// A2P Messaging Profile Bundle BundleSid
    #[serde(
        rename = "customer_profile_bundle_sid",
        skip_serializing_if = "Option::is_none"
    )]
    pub customer_profile_bundle_sid: Option<String>,
    /// The ISO 8601 date and time in GMT when the resource was created
    #[serde(rename = "date_created", skip_serializing_if = "Option::is_none")]
    pub date_created: Option<String>,
    /// The ISO 8601 date and time in GMT when the resource was last updated
    #[serde(rename = "date_updated", skip_serializing_if = "Option::is_none")]
    pub date_updated: Option<String>,
    /// A reason why brand registration has failed
    #[serde(rename = "failure_reason", skip_serializing_if = "Option::is_none")]
    pub failure_reason: Option<String>,
    /// Identity Status
    #[serde(rename = "identity_status", skip_serializing_if = "Option::is_none")]
    pub identity_status: Option<IdentityStatus>,
    /// A boolean that specifies whether brand should be a mock or not. If true, brand will be registered as a mock brand. Defaults to false if no value is provided.
    #[serde(rename = "mock", skip_serializing_if = "Option::is_none")]
    pub mock: Option<bool>,
    /// Russell 3000
    #[serde(rename = "russell_3000", skip_serializing_if = "Option::is_none")]
    pub russell_3000: Option<bool>,
    /// A2P BrandRegistration Sid
    #[serde(rename = "sid", skip_serializing_if = "Option::is_none")]
    pub sid: Option<String>,
    /// Skip Automatic Secondary Vetting
    #[serde(
        rename = "skip_automatic_sec_vet",
        skip_serializing_if = "Option::is_none"
    )]
    pub skip_automatic_sec_vet: Option<bool>,
    /// Brand Registration status
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    /// Tax Exempt Status
    #[serde(rename = "tax_exempt_status", skip_serializing_if = "Option::is_none")]
    pub tax_exempt_status: Option<String>,
    /// Campaign Registry (TCR) Brand ID
    #[serde(rename = "tcr_id", skip_serializing_if = "Option::is_none")]
    pub tcr_id: Option<String>,
    /// The absolute URL of the Brand Registration
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

impl MessagingV1BrandRegistrations {
    pub fn new() -> MessagingV1BrandRegistrations {
        MessagingV1BrandRegistrations {
            a2p_profile_bundle_sid: None,
            account_sid: None,
            brand_score: None,
            brand_type: None,
            customer_profile_bundle_sid: None,
            date_created: None,
            date_updated: None,
            failure_reason: None,
            identity_status: None,
            mock: None,
            russell_3000: None,
            sid: None,
            skip_automatic_sec_vet: None,
            status: None,
            tax_exempt_status: None,
            tcr_id: None,
            url: None,
        }
    }
}

/// Identity Status
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum IdentityStatus {
    #[serde(rename = "SELF_DECLARED")]
    SELFDECLARED,
    #[serde(rename = "UNVERIFIED")]
    UNVERIFIED,
    #[serde(rename = "VERIFIED")]
    VERIFIED,
    #[serde(rename = "VETTED_VERIFIED")]
    VETTEDVERIFIED,
}
/// Brand Registration status
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "PENDING")]
    PENDING,
    #[serde(rename = "APPROVED")]
    APPROVED,
    #[serde(rename = "FAILED")]
    FAILED,
}
