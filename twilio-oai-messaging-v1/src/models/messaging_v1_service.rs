/*
 * Twilio - Messaging
 *
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.20.3
 * Contact: support@twilio.com
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct MessagingV1Service {
    /// The SID of the Account that created the resource
    #[serde(rename = "account_sid", skip_serializing_if = "Option::is_none")]
    pub account_sid: Option<String>,
    /// Whether to enable Area Code Geomatch on the Service Instance
    #[serde(rename = "area_code_geomatch", skip_serializing_if = "Option::is_none")]
    pub area_code_geomatch: Option<bool>,
    /// The ISO 8601 date and time in GMT when the resource was created
    #[serde(rename = "date_created", skip_serializing_if = "Option::is_none")]
    pub date_created: Option<String>,
    /// The ISO 8601 date and time in GMT when the resource was last updated
    #[serde(rename = "date_updated", skip_serializing_if = "Option::is_none")]
    pub date_updated: Option<String>,
    /// The HTTP method we use to call fallback_url
    #[serde(rename = "fallback_method", skip_serializing_if = "Option::is_none")]
    pub fallback_method: Option<FallbackMethod>,
    /// Whether to enable Fallback to Long Code for messages sent through the Service instance
    #[serde(
        rename = "fallback_to_long_code",
        skip_serializing_if = "Option::is_none"
    )]
    pub fallback_to_long_code: Option<bool>,
    /// The URL that we call using fallback_method if an error occurs while retrieving or executing the TwiML from the Inbound Request URL. This field will be overridden if the `use_inbound_webhook_on_number` field is enabled.
    #[serde(rename = "fallback_url", skip_serializing_if = "Option::is_none")]
    pub fallback_url: Option<String>,
    /// The string that you assigned to describe the resource
    #[serde(rename = "friendly_name", skip_serializing_if = "Option::is_none")]
    pub friendly_name: Option<String>,
    /// The HTTP method we use to call inbound_request_url
    #[serde(rename = "inbound_method", skip_serializing_if = "Option::is_none")]
    pub inbound_method: Option<InboundMethod>,
    /// The URL we call using inbound_method when a message is received by any phone number or short code in the Service. This field will be overridden if the `use_inbound_webhook_on_number` field is enabled.
    #[serde(
        rename = "inbound_request_url",
        skip_serializing_if = "Option::is_none"
    )]
    pub inbound_request_url: Option<String>,
    /// The absolute URLs of related resources
    #[serde(rename = "links", skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
    /// Whether to enable the MMS Converter for messages sent through the Service instance
    #[serde(rename = "mms_converter", skip_serializing_if = "Option::is_none")]
    pub mms_converter: Option<bool>,
    /// Reserved
    #[serde(
        rename = "scan_message_content",
        skip_serializing_if = "Option::is_none"
    )]
    pub scan_message_content: Option<ScanMessageContent>,
    /// The unique string that identifies the resource
    #[serde(rename = "sid", skip_serializing_if = "Option::is_none")]
    pub sid: Option<String>,
    /// Whether to enable Encoding for messages sent through the Service instance
    #[serde(rename = "smart_encoding", skip_serializing_if = "Option::is_none")]
    pub smart_encoding: Option<bool>,
    /// The URL we call to pass status updates about message delivery
    #[serde(rename = "status_callback", skip_serializing_if = "Option::is_none")]
    pub status_callback: Option<String>,
    /// Whether to enable Sticky Sender on the Service instance
    #[serde(rename = "sticky_sender", skip_serializing_if = "Option::is_none")]
    pub sticky_sender: Option<bool>,
    /// Reserved
    #[serde(
        rename = "synchronous_validation",
        skip_serializing_if = "Option::is_none"
    )]
    pub synchronous_validation: Option<bool>,
    /// The absolute URL of the Service resource
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    /// If enabled, the webhook url configured on the phone number will be used and will override the `inbound_request_url`/`fallback_url` url called when an inbound message is received.
    #[serde(
        rename = "use_inbound_webhook_on_number",
        skip_serializing_if = "Option::is_none"
    )]
    pub use_inbound_webhook_on_number: Option<bool>,
    /// How long, in seconds, messages sent from the Service are valid
    #[serde(rename = "validity_period", skip_serializing_if = "Option::is_none")]
    pub validity_period: Option<i32>,
}

impl MessagingV1Service {
    pub fn new() -> MessagingV1Service {
        MessagingV1Service {
            account_sid: None,
            area_code_geomatch: None,
            date_created: None,
            date_updated: None,
            fallback_method: None,
            fallback_to_long_code: None,
            fallback_url: None,
            friendly_name: None,
            inbound_method: None,
            inbound_request_url: None,
            links: None,
            mms_converter: None,
            scan_message_content: None,
            sid: None,
            smart_encoding: None,
            status_callback: None,
            sticky_sender: None,
            synchronous_validation: None,
            url: None,
            use_inbound_webhook_on_number: None,
            validity_period: None,
        }
    }
}

/// The HTTP method we use to call fallback_url
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FallbackMethod {
    #[serde(rename = "HEAD")]
    HEAD,
    #[serde(rename = "GET")]
    GET,
    #[serde(rename = "POST")]
    POST,
    #[serde(rename = "PATCH")]
    PATCH,
    #[serde(rename = "PUT")]
    PUT,
    #[serde(rename = "DELETE")]
    DELETE,
}
/// The HTTP method we use to call inbound_request_url
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum InboundMethod {
    #[serde(rename = "HEAD")]
    HEAD,
    #[serde(rename = "GET")]
    GET,
    #[serde(rename = "POST")]
    POST,
    #[serde(rename = "PATCH")]
    PATCH,
    #[serde(rename = "PUT")]
    PUT,
    #[serde(rename = "DELETE")]
    DELETE,
}
/// Reserved
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ScanMessageContent {
    #[serde(rename = "inherit")]
    Inherit,
    #[serde(rename = "enable")]
    Enable,
    #[serde(rename = "disable")]
    Disable,
}
