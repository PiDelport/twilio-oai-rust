/*
 * Twilio - Taskrouter
 *
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.20.3
 * Contact: support@twilio.com
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct TaskrouterV1WorkspaceTask {
    /// The SID of the Account that created the resource
    #[serde(rename = "account_sid", skip_serializing_if = "Option::is_none")]
    pub account_sid: Option<String>,
    /// An object that contains the addon data for all installed addons
    #[serde(rename = "addons", skip_serializing_if = "Option::is_none")]
    pub addons: Option<String>,
    /// The number of seconds since the Task was created
    #[serde(rename = "age", skip_serializing_if = "Option::is_none")]
    pub age: Option<i32>,
    /// The current status of the Task's assignment
    #[serde(rename = "assignment_status", skip_serializing_if = "Option::is_none")]
    pub assignment_status: Option<AssignmentStatus>,
    /// The JSON string with custom attributes of the work
    #[serde(rename = "attributes", skip_serializing_if = "Option::is_none")]
    pub attributes: Option<String>,
    /// The ISO 8601 date and time in GMT when the resource was created
    #[serde(rename = "date_created", skip_serializing_if = "Option::is_none")]
    pub date_created: Option<String>,
    /// The ISO 8601 date and time in GMT when the resource was last updated
    #[serde(rename = "date_updated", skip_serializing_if = "Option::is_none")]
    pub date_updated: Option<String>,
    /// The URLs of related resources
    #[serde(rename = "links", skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
    /// Retrieve the list of all Tasks in the Workspace with the specified priority
    #[serde(rename = "priority", skip_serializing_if = "Option::is_none")]
    pub priority: Option<i32>,
    /// The reason the Task was canceled or completed
    #[serde(rename = "reason", skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    /// The unique string that identifies the resource
    #[serde(rename = "sid", skip_serializing_if = "Option::is_none")]
    pub sid: Option<String>,
    /// The SID of the TaskChannel
    #[serde(rename = "task_channel_sid", skip_serializing_if = "Option::is_none")]
    pub task_channel_sid: Option<String>,
    /// The unique name of the TaskChannel
    #[serde(
        rename = "task_channel_unique_name",
        skip_serializing_if = "Option::is_none"
    )]
    pub task_channel_unique_name: Option<String>,
    /// The ISO 8601 date and time in GMT when the Task entered the TaskQueue.
    #[serde(
        rename = "task_queue_entered_date",
        skip_serializing_if = "Option::is_none"
    )]
    pub task_queue_entered_date: Option<String>,
    /// The friendly name of the TaskQueue
    #[serde(
        rename = "task_queue_friendly_name",
        skip_serializing_if = "Option::is_none"
    )]
    pub task_queue_friendly_name: Option<String>,
    /// The SID of the TaskQueue
    #[serde(rename = "task_queue_sid", skip_serializing_if = "Option::is_none")]
    pub task_queue_sid: Option<String>,
    /// The amount of time in seconds that the Task can live before being assigned
    #[serde(rename = "timeout", skip_serializing_if = "Option::is_none")]
    pub timeout: Option<i32>,
    /// The absolute URL of the Task resource
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    /// The friendly name of the Workflow that is controlling the Task
    #[serde(
        rename = "workflow_friendly_name",
        skip_serializing_if = "Option::is_none"
    )]
    pub workflow_friendly_name: Option<String>,
    /// The SID of the Workflow that is controlling the Task
    #[serde(rename = "workflow_sid", skip_serializing_if = "Option::is_none")]
    pub workflow_sid: Option<String>,
    /// The SID of the Workspace that contains the Task
    #[serde(rename = "workspace_sid", skip_serializing_if = "Option::is_none")]
    pub workspace_sid: Option<String>,
}

impl TaskrouterV1WorkspaceTask {
    pub fn new() -> TaskrouterV1WorkspaceTask {
        TaskrouterV1WorkspaceTask {
            account_sid: None,
            addons: None,
            age: None,
            assignment_status: None,
            attributes: None,
            date_created: None,
            date_updated: None,
            links: None,
            priority: None,
            reason: None,
            sid: None,
            task_channel_sid: None,
            task_channel_unique_name: None,
            task_queue_entered_date: None,
            task_queue_friendly_name: None,
            task_queue_sid: None,
            timeout: None,
            url: None,
            workflow_friendly_name: None,
            workflow_sid: None,
            workspace_sid: None,
        }
    }
}

/// The current status of the Task's assignment
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AssignmentStatus {
    #[serde(rename = "pending")]
    Pending,
    #[serde(rename = "reserved")]
    Reserved,
    #[serde(rename = "assigned")]
    Assigned,
    #[serde(rename = "canceled")]
    Canceled,
    #[serde(rename = "completed")]
    Completed,
    #[serde(rename = "wrapping")]
    Wrapping,
}
