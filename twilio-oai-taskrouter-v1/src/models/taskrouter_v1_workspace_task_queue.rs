/*
 * Twilio - Taskrouter
 *
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.20.2
 * Contact: support@twilio.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct TaskrouterV1WorkspaceTaskQueue {
    /// The SID of the Account that created the resource
    #[serde(rename = "account_sid", skip_serializing_if = "Option::is_none")]
    pub account_sid: Option<String>,
    /// The name of the Activity to assign Workers when a task is assigned for them
    #[serde(rename = "assignment_activity_name", skip_serializing_if = "Option::is_none")]
    pub assignment_activity_name: Option<String>,
    /// The SID of the Activity to assign Workers when a task is assigned for them
    #[serde(rename = "assignment_activity_sid", skip_serializing_if = "Option::is_none")]
    pub assignment_activity_sid: Option<String>,
    /// The RFC 2822 date and time in GMT when the resource was created
    #[serde(rename = "date_created", skip_serializing_if = "Option::is_none")]
    pub date_created: Option<String>,
    /// The RFC 2822 date and time in GMT when the resource was last updated
    #[serde(rename = "date_updated", skip_serializing_if = "Option::is_none")]
    pub date_updated: Option<String>,
    /// The string that you assigned to describe the resource
    #[serde(rename = "friendly_name", skip_serializing_if = "Option::is_none")]
    pub friendly_name: Option<String>,
    /// The URLs of related resources
    #[serde(rename = "links", skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
    /// The maximum number of Workers to reserve
    #[serde(rename = "max_reserved_workers", skip_serializing_if = "Option::is_none")]
    pub max_reserved_workers: Option<i32>,
    /// The name of the Activity to assign Workers once a task is reserved for them
    #[serde(rename = "reservation_activity_name", skip_serializing_if = "Option::is_none")]
    pub reservation_activity_name: Option<String>,
    /// The SID of the Activity to assign Workers once a task is reserved for them
    #[serde(rename = "reservation_activity_sid", skip_serializing_if = "Option::is_none")]
    pub reservation_activity_sid: Option<String>,
    /// The unique string that identifies the resource
    #[serde(rename = "sid", skip_serializing_if = "Option::is_none")]
    pub sid: Option<String>,
    /// A string describing the Worker selection criteria for any Tasks that enter the TaskQueue
    #[serde(rename = "target_workers", skip_serializing_if = "Option::is_none")]
    pub target_workers: Option<String>,
    /// How Tasks will be assigned to Workers
    #[serde(rename = "task_order", skip_serializing_if = "Option::is_none")]
    pub task_order: Option<TaskOrder>,
    /// The absolute URL of the TaskQueue resource
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    /// The SID of the Workspace that contains the TaskQueue
    #[serde(rename = "workspace_sid", skip_serializing_if = "Option::is_none")]
    pub workspace_sid: Option<String>,
}

impl TaskrouterV1WorkspaceTaskQueue {
    pub fn new() -> TaskrouterV1WorkspaceTaskQueue {
        TaskrouterV1WorkspaceTaskQueue {
            account_sid: None,
            assignment_activity_name: None,
            assignment_activity_sid: None,
            date_created: None,
            date_updated: None,
            friendly_name: None,
            links: None,
            max_reserved_workers: None,
            reservation_activity_name: None,
            reservation_activity_sid: None,
            sid: None,
            target_workers: None,
            task_order: None,
            url: None,
            workspace_sid: None,
        }
    }
}

/// How Tasks will be assigned to Workers
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TaskOrder {
    #[serde(rename = "FIFO")]
    FIFO,
    #[serde(rename = "LIFO")]
    LIFO,
}

