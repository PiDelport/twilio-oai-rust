/*
 * Twilio - Trunking
 *
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.20.3
 * Contact: support@twilio.com
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct TrunkingV1Trunk {
    /// The SID of the Account that created the resource
    #[serde(rename = "account_sid", skip_serializing_if = "Option::is_none")]
    pub account_sid: Option<String>,
    /// The types of authentication mapped to the domain
    #[serde(rename = "auth_type", skip_serializing_if = "Option::is_none")]
    pub auth_type: Option<String>,
    /// Reserved
    #[serde(rename = "auth_type_set", skip_serializing_if = "Option::is_none")]
    pub auth_type_set: Option<Vec<String>>,
    /// Whether Caller ID Name (CNAM) lookup is enabled for the trunk
    #[serde(
        rename = "cnam_lookup_enabled",
        skip_serializing_if = "Option::is_none"
    )]
    pub cnam_lookup_enabled: Option<bool>,
    /// The RFC 2822 date and time in GMT when the resource was created
    #[serde(rename = "date_created", skip_serializing_if = "Option::is_none")]
    pub date_created: Option<String>,
    /// The RFC 2822 date and time in GMT when the resource was last updated
    #[serde(rename = "date_updated", skip_serializing_if = "Option::is_none")]
    pub date_updated: Option<String>,
    /// The HTTP method we use to call the disaster_recovery_url
    #[serde(
        rename = "disaster_recovery_method",
        skip_serializing_if = "Option::is_none"
    )]
    pub disaster_recovery_method: Option<DisasterRecoveryMethod>,
    /// The HTTP URL that we call if an error occurs while sending SIP traffic towards your configured Origination URL
    #[serde(
        rename = "disaster_recovery_url",
        skip_serializing_if = "Option::is_none"
    )]
    pub disaster_recovery_url: Option<String>,
    /// The unique address you reserve on Twilio to which you route your SIP traffic
    #[serde(rename = "domain_name", skip_serializing_if = "Option::is_none")]
    pub domain_name: Option<String>,
    /// The string that you assigned to describe the resource
    #[serde(rename = "friendly_name", skip_serializing_if = "Option::is_none")]
    pub friendly_name: Option<String>,
    /// The URLs of related resources
    #[serde(rename = "links", skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
    /// The recording settings for the trunk
    #[serde(rename = "recording", skip_serializing_if = "Option::is_none")]
    pub recording: Option<serde_json::Value>,
    /// Whether Secure Trunking is enabled for the trunk
    #[serde(rename = "secure", skip_serializing_if = "Option::is_none")]
    pub secure: Option<bool>,
    /// The unique string that identifies the resource
    #[serde(rename = "sid", skip_serializing_if = "Option::is_none")]
    pub sid: Option<String>,
    /// The call transfer settings for the trunk
    #[serde(rename = "transfer_mode", skip_serializing_if = "Option::is_none")]
    pub transfer_mode: Option<TransferMode>,
    /// The absolute URL of the resource
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

impl TrunkingV1Trunk {
    pub fn new() -> TrunkingV1Trunk {
        TrunkingV1Trunk {
            account_sid: None,
            auth_type: None,
            auth_type_set: None,
            cnam_lookup_enabled: None,
            date_created: None,
            date_updated: None,
            disaster_recovery_method: None,
            disaster_recovery_url: None,
            domain_name: None,
            friendly_name: None,
            links: None,
            recording: None,
            secure: None,
            sid: None,
            transfer_mode: None,
            url: None,
        }
    }
}

/// The HTTP method we use to call the disaster_recovery_url
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DisasterRecoveryMethod {
    #[serde(rename = "HEAD")]
    HEAD,
    #[serde(rename = "GET")]
    GET,
    #[serde(rename = "POST")]
    POST,
    #[serde(rename = "PATCH")]
    PATCH,
    #[serde(rename = "PUT")]
    PUT,
    #[serde(rename = "DELETE")]
    DELETE,
}
/// The call transfer settings for the trunk
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TransferMode {
    #[serde(rename = "disable-all")]
    DisableAll,
    #[serde(rename = "enable-all")]
    EnableAll,
    #[serde(rename = "sip-only")]
    SipOnly,
}
