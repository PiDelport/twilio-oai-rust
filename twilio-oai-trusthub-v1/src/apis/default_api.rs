/*
 * Twilio - Trusthub
 *
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.20.3
 * Contact: support@twilio.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method `create_customer_profile`
#[derive(Clone, Debug, Default)]
pub struct CreateCustomerProfileParams {
    /// The email address that will receive updates when the Customer-Profile resource changes status.
    pub email: String,
    /// The string that you assigned to describe the resource.
    pub friendly_name: String,
    /// The unique string of a policy that is associated to the Customer-Profile resource.
    pub policy_sid: String,
    /// The URL we call to inform your application of status changes.
    pub status_callback: Option<String>
}

/// struct for passing parameters to the method `create_customer_profile_channel_endpoint_assignment`
#[derive(Clone, Debug, Default)]
pub struct CreateCustomerProfileChannelEndpointAssignmentParams {
    /// The unique string that we created to identify the CustomerProfile resource.
    pub customer_profile_sid: String,
    /// The SID of an channel endpoint
    pub channel_endpoint_sid: String,
    /// The type of channel endpoint. eg: phone-number
    pub channel_endpoint_type: String
}

/// struct for passing parameters to the method `create_customer_profile_entity_assignment`
#[derive(Clone, Debug, Default)]
pub struct CreateCustomerProfileEntityAssignmentParams {
    /// The unique string that we created to identify the CustomerProfile resource.
    pub customer_profile_sid: String,
    /// The SID of an object bag that holds information of the different items.
    pub object_sid: String
}

/// struct for passing parameters to the method `create_customer_profile_evaluation`
#[derive(Clone, Debug, Default)]
pub struct CreateCustomerProfileEvaluationParams {
    /// The unique string that we created to identify the CustomerProfile resource.
    pub customer_profile_sid: String,
    /// The unique string of a policy that is associated to the customer_profile resource.
    pub policy_sid: String
}

/// struct for passing parameters to the method `create_end_user`
#[derive(Clone, Debug, Default)]
pub struct CreateEndUserParams {
    /// The string that you assigned to describe the resource.
    pub friendly_name: String,
    /// The type of end user of the Bundle resource - can be `individual` or `business`.
    pub _type: String,
    /// The set of parameters that are the attributes of the End User resource which are derived End User Types.
    pub attributes: Option<serde_json::Value>
}

/// struct for passing parameters to the method `create_supporting_document`
#[derive(Clone, Debug, Default)]
pub struct CreateSupportingDocumentParams {
    /// The string that you assigned to describe the resource.
    pub friendly_name: String,
    /// The type of the Supporting Document.
    pub _type: String,
    /// The set of parameters that are the attributes of the Supporting Documents resource which are derived Supporting Document Types.
    pub attributes: Option<serde_json::Value>
}

/// struct for passing parameters to the method `create_trust_product`
#[derive(Clone, Debug, Default)]
pub struct CreateTrustProductParams {
    /// The email address that will receive updates when the Customer-Profile resource changes status.
    pub email: String,
    /// The string that you assigned to describe the resource.
    pub friendly_name: String,
    /// The unique string of a policy that is associated to the Customer-Profile resource.
    pub policy_sid: String,
    /// The URL we call to inform your application of status changes.
    pub status_callback: Option<String>
}

/// struct for passing parameters to the method `create_trust_product_channel_endpoint_assignment`
#[derive(Clone, Debug, Default)]
pub struct CreateTrustProductChannelEndpointAssignmentParams {
    /// The unique string that we created to identify the CustomerProfile resource.
    pub trust_product_sid: String,
    /// The SID of an channel endpoint
    pub channel_endpoint_sid: String,
    /// The type of channel endpoint. eg: phone-number
    pub channel_endpoint_type: String
}

/// struct for passing parameters to the method `create_trust_product_entity_assignment`
#[derive(Clone, Debug, Default)]
pub struct CreateTrustProductEntityAssignmentParams {
    /// The unique string that we created to identify the TrustProduct resource.
    pub trust_product_sid: String,
    /// The SID of an object bag that holds information of the different items.
    pub object_sid: String
}

/// struct for passing parameters to the method `create_trust_product_evaluation`
#[derive(Clone, Debug, Default)]
pub struct CreateTrustProductEvaluationParams {
    /// The unique string that we created to identify the trust_product resource.
    pub trust_product_sid: String,
    /// The unique string of a policy that is associated to the customer_profile resource.
    pub policy_sid: String
}

/// struct for passing parameters to the method `delete_customer_profile`
#[derive(Clone, Debug, Default)]
pub struct DeleteCustomerProfileParams {
    /// The unique string that we created to identify the Customer-Profile resource.
    pub sid: String
}

/// struct for passing parameters to the method `delete_customer_profile_channel_endpoint_assignment`
#[derive(Clone, Debug, Default)]
pub struct DeleteCustomerProfileChannelEndpointAssignmentParams {
    /// The unique string that we created to identify the CustomerProfile resource.
    pub customer_profile_sid: String,
    /// The unique string that we created to identify the resource.
    pub sid: String
}

/// struct for passing parameters to the method `delete_customer_profile_entity_assignment`
#[derive(Clone, Debug, Default)]
pub struct DeleteCustomerProfileEntityAssignmentParams {
    /// The unique string that we created to identify the CustomerProfile resource.
    pub customer_profile_sid: String,
    /// The unique string that we created to identify the Identity resource.
    pub sid: String
}

/// struct for passing parameters to the method `delete_end_user`
#[derive(Clone, Debug, Default)]
pub struct DeleteEndUserParams {
    /// The unique string created by Twilio to identify the End User resource.
    pub sid: String
}

/// struct for passing parameters to the method `delete_supporting_document`
#[derive(Clone, Debug, Default)]
pub struct DeleteSupportingDocumentParams {
    /// The unique string created by Twilio to identify the Supporting Document resource.
    pub sid: String
}

/// struct for passing parameters to the method `delete_trust_product`
#[derive(Clone, Debug, Default)]
pub struct DeleteTrustProductParams {
    /// The unique string that we created to identify the Customer-Profile resource.
    pub sid: String
}

/// struct for passing parameters to the method `delete_trust_product_channel_endpoint_assignment`
#[derive(Clone, Debug, Default)]
pub struct DeleteTrustProductChannelEndpointAssignmentParams {
    /// The unique string that we created to identify the CustomerProfile resource.
    pub trust_product_sid: String,
    /// The unique string that we created to identify the resource.
    pub sid: String
}

/// struct for passing parameters to the method `delete_trust_product_entity_assignment`
#[derive(Clone, Debug, Default)]
pub struct DeleteTrustProductEntityAssignmentParams {
    /// The unique string that we created to identify the TrustProduct resource.
    pub trust_product_sid: String,
    /// The unique string that we created to identify the Identity resource.
    pub sid: String
}

/// struct for passing parameters to the method `fetch_customer_profile`
#[derive(Clone, Debug, Default)]
pub struct FetchCustomerProfileParams {
    /// The unique string that we created to identify the Customer-Profile resource.
    pub sid: String
}

/// struct for passing parameters to the method `fetch_customer_profile_channel_endpoint_assignment`
#[derive(Clone, Debug, Default)]
pub struct FetchCustomerProfileChannelEndpointAssignmentParams {
    /// The unique string that we created to identify the CustomerProfile resource.
    pub customer_profile_sid: String,
    /// The unique string that we created to identify the resource.
    pub sid: String
}

/// struct for passing parameters to the method `fetch_customer_profile_entity_assignment`
#[derive(Clone, Debug, Default)]
pub struct FetchCustomerProfileEntityAssignmentParams {
    /// The unique string that we created to identify the CustomerProfile resource.
    pub customer_profile_sid: String,
    /// The unique string that we created to identify the Identity resource.
    pub sid: String
}

/// struct for passing parameters to the method `fetch_customer_profile_evaluation`
#[derive(Clone, Debug, Default)]
pub struct FetchCustomerProfileEvaluationParams {
    /// The unique string that we created to identify the customer_profile resource.
    pub customer_profile_sid: String,
    /// The unique string that identifies the Evaluation resource.
    pub sid: String
}

/// struct for passing parameters to the method `fetch_end_user`
#[derive(Clone, Debug, Default)]
pub struct FetchEndUserParams {
    /// The unique string created by Twilio to identify the End User resource.
    pub sid: String
}

/// struct for passing parameters to the method `fetch_end_user_type`
#[derive(Clone, Debug, Default)]
pub struct FetchEndUserTypeParams {
    /// The unique string that identifies the End-User Type resource.
    pub sid: String
}

/// struct for passing parameters to the method `fetch_policies`
#[derive(Clone, Debug, Default)]
pub struct FetchPoliciesParams {
    /// The unique string that identifies the Policy resource.
    pub sid: String
}

/// struct for passing parameters to the method `fetch_supporting_document`
#[derive(Clone, Debug, Default)]
pub struct FetchSupportingDocumentParams {
    /// The unique string created by Twilio to identify the Supporting Document resource.
    pub sid: String
}

/// struct for passing parameters to the method `fetch_supporting_document_type`
#[derive(Clone, Debug, Default)]
pub struct FetchSupportingDocumentTypeParams {
    /// The unique string that identifies the Supporting Document Type resource.
    pub sid: String
}

/// struct for passing parameters to the method `fetch_trust_product`
#[derive(Clone, Debug, Default)]
pub struct FetchTrustProductParams {
    /// The unique string that we created to identify the Customer-Profile resource.
    pub sid: String
}

/// struct for passing parameters to the method `fetch_trust_product_channel_endpoint_assignment`
#[derive(Clone, Debug, Default)]
pub struct FetchTrustProductChannelEndpointAssignmentParams {
    /// The unique string that we created to identify the CustomerProfile resource.
    pub trust_product_sid: String,
    /// The unique string that we created to identify the resource.
    pub sid: String
}

/// struct for passing parameters to the method `fetch_trust_product_entity_assignment`
#[derive(Clone, Debug, Default)]
pub struct FetchTrustProductEntityAssignmentParams {
    /// The unique string that we created to identify the TrustProduct resource.
    pub trust_product_sid: String,
    /// The unique string that we created to identify the Identity resource.
    pub sid: String
}

/// struct for passing parameters to the method `fetch_trust_product_evaluation`
#[derive(Clone, Debug, Default)]
pub struct FetchTrustProductEvaluationParams {
    /// The unique string that we created to identify the trust_product resource.
    pub trust_product_sid: String,
    /// The unique string that identifies the Evaluation resource.
    pub sid: String
}

/// struct for passing parameters to the method `list_customer_profile`
#[derive(Clone, Debug, Default)]
pub struct ListCustomerProfileParams {
    /// The verification status of the Customer-Profile resource.
    pub status: Option<String>,
    /// The string that you assigned to describe the resource.
    pub friendly_name: Option<String>,
    /// The unique string of a policy that is associated to the Customer-Profile resource.
    pub policy_sid: Option<String>,
    /// How many resources to return in each list page. The default is 50, and the maximum is 1000.
    pub page_size: Option<i32>
}

/// struct for passing parameters to the method `list_customer_profile_channel_endpoint_assignment`
#[derive(Clone, Debug, Default)]
pub struct ListCustomerProfileChannelEndpointAssignmentParams {
    /// The unique string that we created to identify the CustomerProfile resource.
    pub customer_profile_sid: String,
    /// The SID of an channel endpoint
    pub channel_endpoint_sid: Option<String>,
    /// comma separated list of channel endpoint sids
    pub channel_endpoint_sids: Option<String>,
    /// How many resources to return in each list page. The default is 50, and the maximum is 1000.
    pub page_size: Option<i32>
}

/// struct for passing parameters to the method `list_customer_profile_entity_assignment`
#[derive(Clone, Debug, Default)]
pub struct ListCustomerProfileEntityAssignmentParams {
    /// The unique string that we created to identify the CustomerProfile resource.
    pub customer_profile_sid: String,
    /// How many resources to return in each list page. The default is 50, and the maximum is 1000.
    pub page_size: Option<i32>
}

/// struct for passing parameters to the method `list_customer_profile_evaluation`
#[derive(Clone, Debug, Default)]
pub struct ListCustomerProfileEvaluationParams {
    /// The unique string that we created to identify the CustomerProfile resource.
    pub customer_profile_sid: String,
    /// How many resources to return in each list page. The default is 50, and the maximum is 1000.
    pub page_size: Option<i32>
}

/// struct for passing parameters to the method `list_end_user`
#[derive(Clone, Debug, Default)]
pub struct ListEndUserParams {
    /// How many resources to return in each list page. The default is 50, and the maximum is 1000.
    pub page_size: Option<i32>
}

/// struct for passing parameters to the method `list_end_user_type`
#[derive(Clone, Debug, Default)]
pub struct ListEndUserTypeParams {
    /// How many resources to return in each list page. The default is 50, and the maximum is 1000.
    pub page_size: Option<i32>
}

/// struct for passing parameters to the method `list_policies`
#[derive(Clone, Debug, Default)]
pub struct ListPoliciesParams {
    /// How many resources to return in each list page. The default is 50, and the maximum is 1000.
    pub page_size: Option<i32>
}

/// struct for passing parameters to the method `list_supporting_document`
#[derive(Clone, Debug, Default)]
pub struct ListSupportingDocumentParams {
    /// How many resources to return in each list page. The default is 50, and the maximum is 1000.
    pub page_size: Option<i32>
}

/// struct for passing parameters to the method `list_supporting_document_type`
#[derive(Clone, Debug, Default)]
pub struct ListSupportingDocumentTypeParams {
    /// How many resources to return in each list page. The default is 50, and the maximum is 1000.
    pub page_size: Option<i32>
}

/// struct for passing parameters to the method `list_trust_product`
#[derive(Clone, Debug, Default)]
pub struct ListTrustProductParams {
    /// The verification status of the Customer-Profile resource.
    pub status: Option<String>,
    /// The string that you assigned to describe the resource.
    pub friendly_name: Option<String>,
    /// The unique string of a policy that is associated to the Customer-Profile resource.
    pub policy_sid: Option<String>,
    /// How many resources to return in each list page. The default is 50, and the maximum is 1000.
    pub page_size: Option<i32>
}

/// struct for passing parameters to the method `list_trust_product_channel_endpoint_assignment`
#[derive(Clone, Debug, Default)]
pub struct ListTrustProductChannelEndpointAssignmentParams {
    /// The unique string that we created to identify the CustomerProfile resource.
    pub trust_product_sid: String,
    /// The SID of an channel endpoint
    pub channel_endpoint_sid: Option<String>,
    /// comma separated list of channel endpoint sids
    pub channel_endpoint_sids: Option<String>,
    /// How many resources to return in each list page. The default is 50, and the maximum is 1000.
    pub page_size: Option<i32>
}

/// struct for passing parameters to the method `list_trust_product_entity_assignment`
#[derive(Clone, Debug, Default)]
pub struct ListTrustProductEntityAssignmentParams {
    /// The unique string that we created to identify the TrustProduct resource.
    pub trust_product_sid: String,
    /// How many resources to return in each list page. The default is 50, and the maximum is 1000.
    pub page_size: Option<i32>
}

/// struct for passing parameters to the method `list_trust_product_evaluation`
#[derive(Clone, Debug, Default)]
pub struct ListTrustProductEvaluationParams {
    /// The unique string that we created to identify the trust_product resource.
    pub trust_product_sid: String,
    /// How many resources to return in each list page. The default is 50, and the maximum is 1000.
    pub page_size: Option<i32>
}

/// struct for passing parameters to the method `update_customer_profile`
#[derive(Clone, Debug, Default)]
pub struct UpdateCustomerProfileParams {
    /// The unique string that we created to identify the Customer-Profile resource.
    pub sid: String,
    /// The email address that will receive updates when the Customer-Profile resource changes status.
    pub email: Option<String>,
    /// The string that you assigned to describe the resource.
    pub friendly_name: Option<String>,
    /// The verification status of the Customer-Profile resource.
    pub status: Option<String>,
    /// The URL we call to inform your application of status changes.
    pub status_callback: Option<String>
}

/// struct for passing parameters to the method `update_end_user`
#[derive(Clone, Debug, Default)]
pub struct UpdateEndUserParams {
    /// The unique string created by Twilio to identify the End User resource.
    pub sid: String,
    /// The set of parameters that are the attributes of the End User resource which are derived End User Types.
    pub attributes: Option<serde_json::Value>,
    /// The string that you assigned to describe the resource.
    pub friendly_name: Option<String>
}

/// struct for passing parameters to the method `update_supporting_document`
#[derive(Clone, Debug, Default)]
pub struct UpdateSupportingDocumentParams {
    /// The unique string created by Twilio to identify the Supporting Document resource.
    pub sid: String,
    /// The set of parameters that are the attributes of the Supporting Document resource which are derived Supporting Document Types.
    pub attributes: Option<serde_json::Value>,
    /// The string that you assigned to describe the resource.
    pub friendly_name: Option<String>
}

/// struct for passing parameters to the method `update_trust_product`
#[derive(Clone, Debug, Default)]
pub struct UpdateTrustProductParams {
    /// The unique string that we created to identify the Customer-Profile resource.
    pub sid: String,
    /// The email address that will receive updates when the Customer-Profile resource changes status.
    pub email: Option<String>,
    /// The string that you assigned to describe the resource.
    pub friendly_name: Option<String>,
    /// The verification status of the Customer-Profile resource.
    pub status: Option<String>,
    /// The URL we call to inform your application of status changes.
    pub status_callback: Option<String>
}


/// struct for typed successes of method `create_customer_profile`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateCustomerProfileSuccess {
    Status201(crate::models::TrusthubV1CustomerProfile),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `create_customer_profile_channel_endpoint_assignment`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateCustomerProfileChannelEndpointAssignmentSuccess {
    Status201(crate::models::TrusthubV1CustomerProfileCustomerProfileChannelEndpointAssignment),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `create_customer_profile_entity_assignment`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateCustomerProfileEntityAssignmentSuccess {
    Status201(crate::models::TrusthubV1CustomerProfileCustomerProfileEntityAssignment),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `create_customer_profile_evaluation`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateCustomerProfileEvaluationSuccess {
    Status201(crate::models::TrusthubV1CustomerProfileCustomerProfileEvaluation),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `create_end_user`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateEndUserSuccess {
    Status201(crate::models::TrusthubV1EndUser),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `create_supporting_document`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateSupportingDocumentSuccess {
    Status201(crate::models::TrusthubV1SupportingDocument),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `create_trust_product`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateTrustProductSuccess {
    Status201(crate::models::TrusthubV1TrustProduct),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `create_trust_product_channel_endpoint_assignment`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateTrustProductChannelEndpointAssignmentSuccess {
    Status201(crate::models::TrusthubV1TrustProductTrustProductChannelEndpointAssignment),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `create_trust_product_entity_assignment`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateTrustProductEntityAssignmentSuccess {
    Status201(crate::models::TrusthubV1TrustProductTrustProductEntityAssignment),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `create_trust_product_evaluation`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateTrustProductEvaluationSuccess {
    Status201(crate::models::TrusthubV1TrustProductTrustProductEvaluation),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `delete_customer_profile`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteCustomerProfileSuccess {
    Status204(),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `delete_customer_profile_channel_endpoint_assignment`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteCustomerProfileChannelEndpointAssignmentSuccess {
    Status204(),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `delete_customer_profile_entity_assignment`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteCustomerProfileEntityAssignmentSuccess {
    Status204(),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `delete_end_user`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteEndUserSuccess {
    Status204(),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `delete_supporting_document`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteSupportingDocumentSuccess {
    Status204(),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `delete_trust_product`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteTrustProductSuccess {
    Status204(),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `delete_trust_product_channel_endpoint_assignment`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteTrustProductChannelEndpointAssignmentSuccess {
    Status204(),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `delete_trust_product_entity_assignment`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteTrustProductEntityAssignmentSuccess {
    Status204(),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `fetch_customer_profile`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchCustomerProfileSuccess {
    Status200(crate::models::TrusthubV1CustomerProfile),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `fetch_customer_profile_channel_endpoint_assignment`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchCustomerProfileChannelEndpointAssignmentSuccess {
    Status200(crate::models::TrusthubV1CustomerProfileCustomerProfileChannelEndpointAssignment),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `fetch_customer_profile_entity_assignment`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchCustomerProfileEntityAssignmentSuccess {
    Status200(crate::models::TrusthubV1CustomerProfileCustomerProfileEntityAssignment),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `fetch_customer_profile_evaluation`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchCustomerProfileEvaluationSuccess {
    Status200(crate::models::TrusthubV1CustomerProfileCustomerProfileEvaluation),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `fetch_end_user`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchEndUserSuccess {
    Status200(crate::models::TrusthubV1EndUser),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `fetch_end_user_type`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchEndUserTypeSuccess {
    Status200(crate::models::TrusthubV1EndUserType),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `fetch_policies`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchPoliciesSuccess {
    Status200(crate::models::TrusthubV1Policies),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `fetch_supporting_document`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchSupportingDocumentSuccess {
    Status200(crate::models::TrusthubV1SupportingDocument),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `fetch_supporting_document_type`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchSupportingDocumentTypeSuccess {
    Status200(crate::models::TrusthubV1SupportingDocumentType),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `fetch_trust_product`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchTrustProductSuccess {
    Status200(crate::models::TrusthubV1TrustProduct),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `fetch_trust_product_channel_endpoint_assignment`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchTrustProductChannelEndpointAssignmentSuccess {
    Status200(crate::models::TrusthubV1TrustProductTrustProductChannelEndpointAssignment),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `fetch_trust_product_entity_assignment`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchTrustProductEntityAssignmentSuccess {
    Status200(crate::models::TrusthubV1TrustProductTrustProductEntityAssignment),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `fetch_trust_product_evaluation`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchTrustProductEvaluationSuccess {
    Status200(crate::models::TrusthubV1TrustProductTrustProductEvaluation),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `list_customer_profile`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListCustomerProfileSuccess {
    Status200(crate::models::ListCustomerProfileResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `list_customer_profile_channel_endpoint_assignment`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListCustomerProfileChannelEndpointAssignmentSuccess {
    Status200(crate::models::ListCustomerProfileChannelEndpointAssignmentResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `list_customer_profile_entity_assignment`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListCustomerProfileEntityAssignmentSuccess {
    Status200(crate::models::ListCustomerProfileEntityAssignmentResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `list_customer_profile_evaluation`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListCustomerProfileEvaluationSuccess {
    Status200(crate::models::ListCustomerProfileEvaluationResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `list_end_user`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListEndUserSuccess {
    Status200(crate::models::ListEndUserResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `list_end_user_type`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListEndUserTypeSuccess {
    Status200(crate::models::ListEndUserTypeResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `list_policies`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListPoliciesSuccess {
    Status200(crate::models::ListPoliciesResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `list_supporting_document`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListSupportingDocumentSuccess {
    Status200(crate::models::ListSupportingDocumentResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `list_supporting_document_type`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListSupportingDocumentTypeSuccess {
    Status200(crate::models::ListSupportingDocumentTypeResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `list_trust_product`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListTrustProductSuccess {
    Status200(crate::models::ListTrustProductResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `list_trust_product_channel_endpoint_assignment`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListTrustProductChannelEndpointAssignmentSuccess {
    Status200(crate::models::ListTrustProductChannelEndpointAssignmentResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `list_trust_product_entity_assignment`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListTrustProductEntityAssignmentSuccess {
    Status200(crate::models::ListTrustProductEntityAssignmentResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `list_trust_product_evaluation`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListTrustProductEvaluationSuccess {
    Status200(crate::models::ListTrustProductEvaluationResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `update_customer_profile`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateCustomerProfileSuccess {
    Status200(crate::models::TrusthubV1CustomerProfile),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `update_end_user`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateEndUserSuccess {
    Status200(crate::models::TrusthubV1EndUser),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `update_supporting_document`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateSupportingDocumentSuccess {
    Status200(crate::models::TrusthubV1SupportingDocument),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `update_trust_product`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateTrustProductSuccess {
    Status200(crate::models::TrusthubV1TrustProduct),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `create_customer_profile`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateCustomerProfileError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `create_customer_profile_channel_endpoint_assignment`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateCustomerProfileChannelEndpointAssignmentError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `create_customer_profile_entity_assignment`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateCustomerProfileEntityAssignmentError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `create_customer_profile_evaluation`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateCustomerProfileEvaluationError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `create_end_user`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateEndUserError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `create_supporting_document`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateSupportingDocumentError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `create_trust_product`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateTrustProductError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `create_trust_product_channel_endpoint_assignment`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateTrustProductChannelEndpointAssignmentError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `create_trust_product_entity_assignment`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateTrustProductEntityAssignmentError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `create_trust_product_evaluation`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateTrustProductEvaluationError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `delete_customer_profile`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteCustomerProfileError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `delete_customer_profile_channel_endpoint_assignment`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteCustomerProfileChannelEndpointAssignmentError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `delete_customer_profile_entity_assignment`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteCustomerProfileEntityAssignmentError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `delete_end_user`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteEndUserError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `delete_supporting_document`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteSupportingDocumentError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `delete_trust_product`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteTrustProductError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `delete_trust_product_channel_endpoint_assignment`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteTrustProductChannelEndpointAssignmentError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `delete_trust_product_entity_assignment`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteTrustProductEntityAssignmentError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `fetch_customer_profile`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchCustomerProfileError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `fetch_customer_profile_channel_endpoint_assignment`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchCustomerProfileChannelEndpointAssignmentError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `fetch_customer_profile_entity_assignment`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchCustomerProfileEntityAssignmentError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `fetch_customer_profile_evaluation`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchCustomerProfileEvaluationError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `fetch_end_user`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchEndUserError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `fetch_end_user_type`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchEndUserTypeError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `fetch_policies`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchPoliciesError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `fetch_supporting_document`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchSupportingDocumentError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `fetch_supporting_document_type`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchSupportingDocumentTypeError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `fetch_trust_product`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchTrustProductError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `fetch_trust_product_channel_endpoint_assignment`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchTrustProductChannelEndpointAssignmentError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `fetch_trust_product_entity_assignment`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchTrustProductEntityAssignmentError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `fetch_trust_product_evaluation`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchTrustProductEvaluationError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `list_customer_profile`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListCustomerProfileError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `list_customer_profile_channel_endpoint_assignment`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListCustomerProfileChannelEndpointAssignmentError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `list_customer_profile_entity_assignment`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListCustomerProfileEntityAssignmentError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `list_customer_profile_evaluation`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListCustomerProfileEvaluationError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `list_end_user`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListEndUserError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `list_end_user_type`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListEndUserTypeError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `list_policies`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListPoliciesError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `list_supporting_document`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListSupportingDocumentError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `list_supporting_document_type`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListSupportingDocumentTypeError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `list_trust_product`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListTrustProductError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `list_trust_product_channel_endpoint_assignment`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListTrustProductChannelEndpointAssignmentError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `list_trust_product_entity_assignment`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListTrustProductEntityAssignmentError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `list_trust_product_evaluation`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListTrustProductEvaluationError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `update_customer_profile`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateCustomerProfileError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `update_end_user`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateEndUserError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `update_supporting_document`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateSupportingDocumentError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `update_trust_product`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateTrustProductError {
    UnknownValue(serde_json::Value),
}


/// Create a new Customer-Profile.
pub async fn create_customer_profile(configuration: &configuration::Configuration, params: CreateCustomerProfileParams) -> Result<ResponseContent<CreateCustomerProfileSuccess>, Error<CreateCustomerProfileError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let email = params.email;
    let friendly_name = params.friendly_name;
    let policy_sid = params.policy_sid;
    let status_callback = params.status_callback;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/CustomerProfiles", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("Email", email.to_string());
    local_var_form_params.insert("FriendlyName", friendly_name.to_string());
    local_var_form_params.insert("PolicySid", policy_sid.to_string());
    if let Some(local_var_param_value) = status_callback {
        local_var_form_params.insert("StatusCallback", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<CreateCustomerProfileSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<CreateCustomerProfileError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Create a new Assigned Item.
pub async fn create_customer_profile_channel_endpoint_assignment(configuration: &configuration::Configuration, params: CreateCustomerProfileChannelEndpointAssignmentParams) -> Result<ResponseContent<CreateCustomerProfileChannelEndpointAssignmentSuccess>, Error<CreateCustomerProfileChannelEndpointAssignmentError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let customer_profile_sid = params.customer_profile_sid;
    let channel_endpoint_sid = params.channel_endpoint_sid;
    let channel_endpoint_type = params.channel_endpoint_type;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/CustomerProfiles/{CustomerProfileSid}/ChannelEndpointAssignments", local_var_configuration.base_path, CustomerProfileSid=crate::apis::urlencode(customer_profile_sid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("ChannelEndpointSid", channel_endpoint_sid.to_string());
    local_var_form_params.insert("ChannelEndpointType", channel_endpoint_type.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<CreateCustomerProfileChannelEndpointAssignmentSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<CreateCustomerProfileChannelEndpointAssignmentError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Create a new Assigned Item.
pub async fn create_customer_profile_entity_assignment(configuration: &configuration::Configuration, params: CreateCustomerProfileEntityAssignmentParams) -> Result<ResponseContent<CreateCustomerProfileEntityAssignmentSuccess>, Error<CreateCustomerProfileEntityAssignmentError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let customer_profile_sid = params.customer_profile_sid;
    let object_sid = params.object_sid;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/CustomerProfiles/{CustomerProfileSid}/EntityAssignments", local_var_configuration.base_path, CustomerProfileSid=crate::apis::urlencode(customer_profile_sid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("ObjectSid", object_sid.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<CreateCustomerProfileEntityAssignmentSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<CreateCustomerProfileEntityAssignmentError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Create a new Evaluation
pub async fn create_customer_profile_evaluation(configuration: &configuration::Configuration, params: CreateCustomerProfileEvaluationParams) -> Result<ResponseContent<CreateCustomerProfileEvaluationSuccess>, Error<CreateCustomerProfileEvaluationError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let customer_profile_sid = params.customer_profile_sid;
    let policy_sid = params.policy_sid;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/CustomerProfiles/{CustomerProfileSid}/Evaluations", local_var_configuration.base_path, CustomerProfileSid=crate::apis::urlencode(customer_profile_sid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("PolicySid", policy_sid.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<CreateCustomerProfileEvaluationSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<CreateCustomerProfileEvaluationError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Create a new End User.
pub async fn create_end_user(configuration: &configuration::Configuration, params: CreateEndUserParams) -> Result<ResponseContent<CreateEndUserSuccess>, Error<CreateEndUserError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let friendly_name = params.friendly_name;
    let _type = params._type;
    let attributes = params.attributes;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/EndUsers", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    if let Some(local_var_param_value) = attributes {
        local_var_form_params.insert("Attributes", local_var_param_value.to_string());
    }
    local_var_form_params.insert("FriendlyName", friendly_name.to_string());
    local_var_form_params.insert("Type", _type.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<CreateEndUserSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<CreateEndUserError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Create a new Supporting Document.
pub async fn create_supporting_document(configuration: &configuration::Configuration, params: CreateSupportingDocumentParams) -> Result<ResponseContent<CreateSupportingDocumentSuccess>, Error<CreateSupportingDocumentError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let friendly_name = params.friendly_name;
    let _type = params._type;
    let attributes = params.attributes;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/SupportingDocuments", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    if let Some(local_var_param_value) = attributes {
        local_var_form_params.insert("Attributes", local_var_param_value.to_string());
    }
    local_var_form_params.insert("FriendlyName", friendly_name.to_string());
    local_var_form_params.insert("Type", _type.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<CreateSupportingDocumentSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<CreateSupportingDocumentError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Create a new Customer-Profile.
pub async fn create_trust_product(configuration: &configuration::Configuration, params: CreateTrustProductParams) -> Result<ResponseContent<CreateTrustProductSuccess>, Error<CreateTrustProductError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let email = params.email;
    let friendly_name = params.friendly_name;
    let policy_sid = params.policy_sid;
    let status_callback = params.status_callback;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/TrustProducts", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("Email", email.to_string());
    local_var_form_params.insert("FriendlyName", friendly_name.to_string());
    local_var_form_params.insert("PolicySid", policy_sid.to_string());
    if let Some(local_var_param_value) = status_callback {
        local_var_form_params.insert("StatusCallback", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<CreateTrustProductSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<CreateTrustProductError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Create a new Assigned Item.
pub async fn create_trust_product_channel_endpoint_assignment(configuration: &configuration::Configuration, params: CreateTrustProductChannelEndpointAssignmentParams) -> Result<ResponseContent<CreateTrustProductChannelEndpointAssignmentSuccess>, Error<CreateTrustProductChannelEndpointAssignmentError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let trust_product_sid = params.trust_product_sid;
    let channel_endpoint_sid = params.channel_endpoint_sid;
    let channel_endpoint_type = params.channel_endpoint_type;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/TrustProducts/{TrustProductSid}/ChannelEndpointAssignments", local_var_configuration.base_path, TrustProductSid=crate::apis::urlencode(trust_product_sid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("ChannelEndpointSid", channel_endpoint_sid.to_string());
    local_var_form_params.insert("ChannelEndpointType", channel_endpoint_type.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<CreateTrustProductChannelEndpointAssignmentSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<CreateTrustProductChannelEndpointAssignmentError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Create a new Assigned Item.
pub async fn create_trust_product_entity_assignment(configuration: &configuration::Configuration, params: CreateTrustProductEntityAssignmentParams) -> Result<ResponseContent<CreateTrustProductEntityAssignmentSuccess>, Error<CreateTrustProductEntityAssignmentError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let trust_product_sid = params.trust_product_sid;
    let object_sid = params.object_sid;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/TrustProducts/{TrustProductSid}/EntityAssignments", local_var_configuration.base_path, TrustProductSid=crate::apis::urlencode(trust_product_sid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("ObjectSid", object_sid.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<CreateTrustProductEntityAssignmentSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<CreateTrustProductEntityAssignmentError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Create a new Evaluation
pub async fn create_trust_product_evaluation(configuration: &configuration::Configuration, params: CreateTrustProductEvaluationParams) -> Result<ResponseContent<CreateTrustProductEvaluationSuccess>, Error<CreateTrustProductEvaluationError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let trust_product_sid = params.trust_product_sid;
    let policy_sid = params.policy_sid;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/TrustProducts/{TrustProductSid}/Evaluations", local_var_configuration.base_path, TrustProductSid=crate::apis::urlencode(trust_product_sid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("PolicySid", policy_sid.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<CreateTrustProductEvaluationSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<CreateTrustProductEvaluationError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Delete a specific Customer-Profile.
pub async fn delete_customer_profile(configuration: &configuration::Configuration, params: DeleteCustomerProfileParams) -> Result<ResponseContent<DeleteCustomerProfileSuccess>, Error<DeleteCustomerProfileError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let sid = params.sid;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/CustomerProfiles/{Sid}", local_var_configuration.base_path, Sid=crate::apis::urlencode(sid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<DeleteCustomerProfileSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<DeleteCustomerProfileError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Remove an Assignment Item Instance.
pub async fn delete_customer_profile_channel_endpoint_assignment(configuration: &configuration::Configuration, params: DeleteCustomerProfileChannelEndpointAssignmentParams) -> Result<ResponseContent<DeleteCustomerProfileChannelEndpointAssignmentSuccess>, Error<DeleteCustomerProfileChannelEndpointAssignmentError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let customer_profile_sid = params.customer_profile_sid;
    let sid = params.sid;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/CustomerProfiles/{CustomerProfileSid}/ChannelEndpointAssignments/{Sid}", local_var_configuration.base_path, CustomerProfileSid=crate::apis::urlencode(customer_profile_sid), Sid=crate::apis::urlencode(sid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<DeleteCustomerProfileChannelEndpointAssignmentSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<DeleteCustomerProfileChannelEndpointAssignmentError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Remove an Assignment Item Instance.
pub async fn delete_customer_profile_entity_assignment(configuration: &configuration::Configuration, params: DeleteCustomerProfileEntityAssignmentParams) -> Result<ResponseContent<DeleteCustomerProfileEntityAssignmentSuccess>, Error<DeleteCustomerProfileEntityAssignmentError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let customer_profile_sid = params.customer_profile_sid;
    let sid = params.sid;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/CustomerProfiles/{CustomerProfileSid}/EntityAssignments/{Sid}", local_var_configuration.base_path, CustomerProfileSid=crate::apis::urlencode(customer_profile_sid), Sid=crate::apis::urlencode(sid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<DeleteCustomerProfileEntityAssignmentSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<DeleteCustomerProfileEntityAssignmentError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Delete a specific End User.
pub async fn delete_end_user(configuration: &configuration::Configuration, params: DeleteEndUserParams) -> Result<ResponseContent<DeleteEndUserSuccess>, Error<DeleteEndUserError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let sid = params.sid;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/EndUsers/{Sid}", local_var_configuration.base_path, Sid=crate::apis::urlencode(sid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<DeleteEndUserSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<DeleteEndUserError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Delete a specific Supporting Document.
pub async fn delete_supporting_document(configuration: &configuration::Configuration, params: DeleteSupportingDocumentParams) -> Result<ResponseContent<DeleteSupportingDocumentSuccess>, Error<DeleteSupportingDocumentError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let sid = params.sid;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/SupportingDocuments/{Sid}", local_var_configuration.base_path, Sid=crate::apis::urlencode(sid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<DeleteSupportingDocumentSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<DeleteSupportingDocumentError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Delete a specific Customer-Profile.
pub async fn delete_trust_product(configuration: &configuration::Configuration, params: DeleteTrustProductParams) -> Result<ResponseContent<DeleteTrustProductSuccess>, Error<DeleteTrustProductError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let sid = params.sid;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/TrustProducts/{Sid}", local_var_configuration.base_path, Sid=crate::apis::urlencode(sid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<DeleteTrustProductSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<DeleteTrustProductError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Remove an Assignment Item Instance.
pub async fn delete_trust_product_channel_endpoint_assignment(configuration: &configuration::Configuration, params: DeleteTrustProductChannelEndpointAssignmentParams) -> Result<ResponseContent<DeleteTrustProductChannelEndpointAssignmentSuccess>, Error<DeleteTrustProductChannelEndpointAssignmentError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let trust_product_sid = params.trust_product_sid;
    let sid = params.sid;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/TrustProducts/{TrustProductSid}/ChannelEndpointAssignments/{Sid}", local_var_configuration.base_path, TrustProductSid=crate::apis::urlencode(trust_product_sid), Sid=crate::apis::urlencode(sid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<DeleteTrustProductChannelEndpointAssignmentSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<DeleteTrustProductChannelEndpointAssignmentError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Remove an Assignment Item Instance.
pub async fn delete_trust_product_entity_assignment(configuration: &configuration::Configuration, params: DeleteTrustProductEntityAssignmentParams) -> Result<ResponseContent<DeleteTrustProductEntityAssignmentSuccess>, Error<DeleteTrustProductEntityAssignmentError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let trust_product_sid = params.trust_product_sid;
    let sid = params.sid;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/TrustProducts/{TrustProductSid}/EntityAssignments/{Sid}", local_var_configuration.base_path, TrustProductSid=crate::apis::urlencode(trust_product_sid), Sid=crate::apis::urlencode(sid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<DeleteTrustProductEntityAssignmentSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<DeleteTrustProductEntityAssignmentError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Fetch a specific Customer-Profile instance.
pub async fn fetch_customer_profile(configuration: &configuration::Configuration, params: FetchCustomerProfileParams) -> Result<ResponseContent<FetchCustomerProfileSuccess>, Error<FetchCustomerProfileError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let sid = params.sid;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/CustomerProfiles/{Sid}", local_var_configuration.base_path, Sid=crate::apis::urlencode(sid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<FetchCustomerProfileSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<FetchCustomerProfileError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Fetch specific Assigned Item Instance.
pub async fn fetch_customer_profile_channel_endpoint_assignment(configuration: &configuration::Configuration, params: FetchCustomerProfileChannelEndpointAssignmentParams) -> Result<ResponseContent<FetchCustomerProfileChannelEndpointAssignmentSuccess>, Error<FetchCustomerProfileChannelEndpointAssignmentError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let customer_profile_sid = params.customer_profile_sid;
    let sid = params.sid;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/CustomerProfiles/{CustomerProfileSid}/ChannelEndpointAssignments/{Sid}", local_var_configuration.base_path, CustomerProfileSid=crate::apis::urlencode(customer_profile_sid), Sid=crate::apis::urlencode(sid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<FetchCustomerProfileChannelEndpointAssignmentSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<FetchCustomerProfileChannelEndpointAssignmentError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Fetch specific Assigned Item Instance.
pub async fn fetch_customer_profile_entity_assignment(configuration: &configuration::Configuration, params: FetchCustomerProfileEntityAssignmentParams) -> Result<ResponseContent<FetchCustomerProfileEntityAssignmentSuccess>, Error<FetchCustomerProfileEntityAssignmentError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let customer_profile_sid = params.customer_profile_sid;
    let sid = params.sid;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/CustomerProfiles/{CustomerProfileSid}/EntityAssignments/{Sid}", local_var_configuration.base_path, CustomerProfileSid=crate::apis::urlencode(customer_profile_sid), Sid=crate::apis::urlencode(sid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<FetchCustomerProfileEntityAssignmentSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<FetchCustomerProfileEntityAssignmentError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Fetch specific Evaluation Instance.
pub async fn fetch_customer_profile_evaluation(configuration: &configuration::Configuration, params: FetchCustomerProfileEvaluationParams) -> Result<ResponseContent<FetchCustomerProfileEvaluationSuccess>, Error<FetchCustomerProfileEvaluationError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let customer_profile_sid = params.customer_profile_sid;
    let sid = params.sid;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/CustomerProfiles/{CustomerProfileSid}/Evaluations/{Sid}", local_var_configuration.base_path, CustomerProfileSid=crate::apis::urlencode(customer_profile_sid), Sid=crate::apis::urlencode(sid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<FetchCustomerProfileEvaluationSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<FetchCustomerProfileEvaluationError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Fetch specific End User Instance.
pub async fn fetch_end_user(configuration: &configuration::Configuration, params: FetchEndUserParams) -> Result<ResponseContent<FetchEndUserSuccess>, Error<FetchEndUserError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let sid = params.sid;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/EndUsers/{Sid}", local_var_configuration.base_path, Sid=crate::apis::urlencode(sid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<FetchEndUserSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<FetchEndUserError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Fetch a specific End-User Type Instance.
pub async fn fetch_end_user_type(configuration: &configuration::Configuration, params: FetchEndUserTypeParams) -> Result<ResponseContent<FetchEndUserTypeSuccess>, Error<FetchEndUserTypeError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let sid = params.sid;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/EndUserTypes/{Sid}", local_var_configuration.base_path, Sid=crate::apis::urlencode(sid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<FetchEndUserTypeSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<FetchEndUserTypeError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Fetch specific Policy Instance.
pub async fn fetch_policies(configuration: &configuration::Configuration, params: FetchPoliciesParams) -> Result<ResponseContent<FetchPoliciesSuccess>, Error<FetchPoliciesError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let sid = params.sid;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/Policies/{Sid}", local_var_configuration.base_path, Sid=crate::apis::urlencode(sid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<FetchPoliciesSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<FetchPoliciesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Fetch specific Supporting Document Instance.
pub async fn fetch_supporting_document(configuration: &configuration::Configuration, params: FetchSupportingDocumentParams) -> Result<ResponseContent<FetchSupportingDocumentSuccess>, Error<FetchSupportingDocumentError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let sid = params.sid;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/SupportingDocuments/{Sid}", local_var_configuration.base_path, Sid=crate::apis::urlencode(sid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<FetchSupportingDocumentSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<FetchSupportingDocumentError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Fetch a specific Supporting Document Type Instance.
pub async fn fetch_supporting_document_type(configuration: &configuration::Configuration, params: FetchSupportingDocumentTypeParams) -> Result<ResponseContent<FetchSupportingDocumentTypeSuccess>, Error<FetchSupportingDocumentTypeError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let sid = params.sid;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/SupportingDocumentTypes/{Sid}", local_var_configuration.base_path, Sid=crate::apis::urlencode(sid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<FetchSupportingDocumentTypeSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<FetchSupportingDocumentTypeError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Fetch a specific Customer-Profile instance.
pub async fn fetch_trust_product(configuration: &configuration::Configuration, params: FetchTrustProductParams) -> Result<ResponseContent<FetchTrustProductSuccess>, Error<FetchTrustProductError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let sid = params.sid;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/TrustProducts/{Sid}", local_var_configuration.base_path, Sid=crate::apis::urlencode(sid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<FetchTrustProductSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<FetchTrustProductError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Fetch specific Assigned Item Instance.
pub async fn fetch_trust_product_channel_endpoint_assignment(configuration: &configuration::Configuration, params: FetchTrustProductChannelEndpointAssignmentParams) -> Result<ResponseContent<FetchTrustProductChannelEndpointAssignmentSuccess>, Error<FetchTrustProductChannelEndpointAssignmentError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let trust_product_sid = params.trust_product_sid;
    let sid = params.sid;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/TrustProducts/{TrustProductSid}/ChannelEndpointAssignments/{Sid}", local_var_configuration.base_path, TrustProductSid=crate::apis::urlencode(trust_product_sid), Sid=crate::apis::urlencode(sid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<FetchTrustProductChannelEndpointAssignmentSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<FetchTrustProductChannelEndpointAssignmentError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Fetch specific Assigned Item Instance.
pub async fn fetch_trust_product_entity_assignment(configuration: &configuration::Configuration, params: FetchTrustProductEntityAssignmentParams) -> Result<ResponseContent<FetchTrustProductEntityAssignmentSuccess>, Error<FetchTrustProductEntityAssignmentError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let trust_product_sid = params.trust_product_sid;
    let sid = params.sid;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/TrustProducts/{TrustProductSid}/EntityAssignments/{Sid}", local_var_configuration.base_path, TrustProductSid=crate::apis::urlencode(trust_product_sid), Sid=crate::apis::urlencode(sid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<FetchTrustProductEntityAssignmentSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<FetchTrustProductEntityAssignmentError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Fetch specific Evaluation Instance.
pub async fn fetch_trust_product_evaluation(configuration: &configuration::Configuration, params: FetchTrustProductEvaluationParams) -> Result<ResponseContent<FetchTrustProductEvaluationSuccess>, Error<FetchTrustProductEvaluationError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let trust_product_sid = params.trust_product_sid;
    let sid = params.sid;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/TrustProducts/{TrustProductSid}/Evaluations/{Sid}", local_var_configuration.base_path, TrustProductSid=crate::apis::urlencode(trust_product_sid), Sid=crate::apis::urlencode(sid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<FetchTrustProductEvaluationSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<FetchTrustProductEvaluationError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Retrieve a list of all Customer-Profiles for an account.
pub async fn list_customer_profile(configuration: &configuration::Configuration, params: ListCustomerProfileParams) -> Result<ResponseContent<ListCustomerProfileSuccess>, Error<ListCustomerProfileError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let status = params.status;
    let friendly_name = params.friendly_name;
    let policy_sid = params.policy_sid;
    let page_size = params.page_size;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/CustomerProfiles", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = status {
        local_var_req_builder = local_var_req_builder.query(&[("Status", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = friendly_name {
        local_var_req_builder = local_var_req_builder.query(&[("FriendlyName", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = policy_sid {
        local_var_req_builder = local_var_req_builder.query(&[("PolicySid", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page_size {
        local_var_req_builder = local_var_req_builder.query(&[("PageSize", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<ListCustomerProfileSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<ListCustomerProfileError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Retrieve a list of all Assigned Items for an account.
pub async fn list_customer_profile_channel_endpoint_assignment(configuration: &configuration::Configuration, params: ListCustomerProfileChannelEndpointAssignmentParams) -> Result<ResponseContent<ListCustomerProfileChannelEndpointAssignmentSuccess>, Error<ListCustomerProfileChannelEndpointAssignmentError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let customer_profile_sid = params.customer_profile_sid;
    let channel_endpoint_sid = params.channel_endpoint_sid;
    let channel_endpoint_sids = params.channel_endpoint_sids;
    let page_size = params.page_size;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/CustomerProfiles/{CustomerProfileSid}/ChannelEndpointAssignments", local_var_configuration.base_path, CustomerProfileSid=crate::apis::urlencode(customer_profile_sid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = channel_endpoint_sid {
        local_var_req_builder = local_var_req_builder.query(&[("ChannelEndpointSid", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = channel_endpoint_sids {
        local_var_req_builder = local_var_req_builder.query(&[("ChannelEndpointSids", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page_size {
        local_var_req_builder = local_var_req_builder.query(&[("PageSize", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<ListCustomerProfileChannelEndpointAssignmentSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<ListCustomerProfileChannelEndpointAssignmentError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Retrieve a list of all Assigned Items for an account.
pub async fn list_customer_profile_entity_assignment(configuration: &configuration::Configuration, params: ListCustomerProfileEntityAssignmentParams) -> Result<ResponseContent<ListCustomerProfileEntityAssignmentSuccess>, Error<ListCustomerProfileEntityAssignmentError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let customer_profile_sid = params.customer_profile_sid;
    let page_size = params.page_size;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/CustomerProfiles/{CustomerProfileSid}/EntityAssignments", local_var_configuration.base_path, CustomerProfileSid=crate::apis::urlencode(customer_profile_sid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = page_size {
        local_var_req_builder = local_var_req_builder.query(&[("PageSize", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<ListCustomerProfileEntityAssignmentSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<ListCustomerProfileEntityAssignmentError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Retrieve a list of Evaluations associated to the customer_profile resource.
pub async fn list_customer_profile_evaluation(configuration: &configuration::Configuration, params: ListCustomerProfileEvaluationParams) -> Result<ResponseContent<ListCustomerProfileEvaluationSuccess>, Error<ListCustomerProfileEvaluationError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let customer_profile_sid = params.customer_profile_sid;
    let page_size = params.page_size;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/CustomerProfiles/{CustomerProfileSid}/Evaluations", local_var_configuration.base_path, CustomerProfileSid=crate::apis::urlencode(customer_profile_sid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = page_size {
        local_var_req_builder = local_var_req_builder.query(&[("PageSize", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<ListCustomerProfileEvaluationSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<ListCustomerProfileEvaluationError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Retrieve a list of all End User for an account.
pub async fn list_end_user(configuration: &configuration::Configuration, params: ListEndUserParams) -> Result<ResponseContent<ListEndUserSuccess>, Error<ListEndUserError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let page_size = params.page_size;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/EndUsers", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = page_size {
        local_var_req_builder = local_var_req_builder.query(&[("PageSize", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<ListEndUserSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<ListEndUserError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Retrieve a list of all End-User Types.
pub async fn list_end_user_type(configuration: &configuration::Configuration, params: ListEndUserTypeParams) -> Result<ResponseContent<ListEndUserTypeSuccess>, Error<ListEndUserTypeError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let page_size = params.page_size;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/EndUserTypes", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = page_size {
        local_var_req_builder = local_var_req_builder.query(&[("PageSize", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<ListEndUserTypeSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<ListEndUserTypeError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Retrieve a list of all Policys.
pub async fn list_policies(configuration: &configuration::Configuration, params: ListPoliciesParams) -> Result<ResponseContent<ListPoliciesSuccess>, Error<ListPoliciesError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let page_size = params.page_size;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/Policies", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = page_size {
        local_var_req_builder = local_var_req_builder.query(&[("PageSize", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<ListPoliciesSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<ListPoliciesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Retrieve a list of all Supporting Document for an account.
pub async fn list_supporting_document(configuration: &configuration::Configuration, params: ListSupportingDocumentParams) -> Result<ResponseContent<ListSupportingDocumentSuccess>, Error<ListSupportingDocumentError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let page_size = params.page_size;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/SupportingDocuments", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = page_size {
        local_var_req_builder = local_var_req_builder.query(&[("PageSize", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<ListSupportingDocumentSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<ListSupportingDocumentError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Retrieve a list of all Supporting Document Types.
pub async fn list_supporting_document_type(configuration: &configuration::Configuration, params: ListSupportingDocumentTypeParams) -> Result<ResponseContent<ListSupportingDocumentTypeSuccess>, Error<ListSupportingDocumentTypeError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let page_size = params.page_size;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/SupportingDocumentTypes", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = page_size {
        local_var_req_builder = local_var_req_builder.query(&[("PageSize", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<ListSupportingDocumentTypeSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<ListSupportingDocumentTypeError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Retrieve a list of all Customer-Profiles for an account.
pub async fn list_trust_product(configuration: &configuration::Configuration, params: ListTrustProductParams) -> Result<ResponseContent<ListTrustProductSuccess>, Error<ListTrustProductError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let status = params.status;
    let friendly_name = params.friendly_name;
    let policy_sid = params.policy_sid;
    let page_size = params.page_size;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/TrustProducts", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = status {
        local_var_req_builder = local_var_req_builder.query(&[("Status", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = friendly_name {
        local_var_req_builder = local_var_req_builder.query(&[("FriendlyName", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = policy_sid {
        local_var_req_builder = local_var_req_builder.query(&[("PolicySid", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page_size {
        local_var_req_builder = local_var_req_builder.query(&[("PageSize", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<ListTrustProductSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<ListTrustProductError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Retrieve a list of all Assigned Items for an account.
pub async fn list_trust_product_channel_endpoint_assignment(configuration: &configuration::Configuration, params: ListTrustProductChannelEndpointAssignmentParams) -> Result<ResponseContent<ListTrustProductChannelEndpointAssignmentSuccess>, Error<ListTrustProductChannelEndpointAssignmentError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let trust_product_sid = params.trust_product_sid;
    let channel_endpoint_sid = params.channel_endpoint_sid;
    let channel_endpoint_sids = params.channel_endpoint_sids;
    let page_size = params.page_size;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/TrustProducts/{TrustProductSid}/ChannelEndpointAssignments", local_var_configuration.base_path, TrustProductSid=crate::apis::urlencode(trust_product_sid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = channel_endpoint_sid {
        local_var_req_builder = local_var_req_builder.query(&[("ChannelEndpointSid", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = channel_endpoint_sids {
        local_var_req_builder = local_var_req_builder.query(&[("ChannelEndpointSids", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page_size {
        local_var_req_builder = local_var_req_builder.query(&[("PageSize", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<ListTrustProductChannelEndpointAssignmentSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<ListTrustProductChannelEndpointAssignmentError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Retrieve a list of all Assigned Items for an account.
pub async fn list_trust_product_entity_assignment(configuration: &configuration::Configuration, params: ListTrustProductEntityAssignmentParams) -> Result<ResponseContent<ListTrustProductEntityAssignmentSuccess>, Error<ListTrustProductEntityAssignmentError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let trust_product_sid = params.trust_product_sid;
    let page_size = params.page_size;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/TrustProducts/{TrustProductSid}/EntityAssignments", local_var_configuration.base_path, TrustProductSid=crate::apis::urlencode(trust_product_sid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = page_size {
        local_var_req_builder = local_var_req_builder.query(&[("PageSize", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<ListTrustProductEntityAssignmentSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<ListTrustProductEntityAssignmentError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Retrieve a list of Evaluations associated to the trust_product resource.
pub async fn list_trust_product_evaluation(configuration: &configuration::Configuration, params: ListTrustProductEvaluationParams) -> Result<ResponseContent<ListTrustProductEvaluationSuccess>, Error<ListTrustProductEvaluationError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let trust_product_sid = params.trust_product_sid;
    let page_size = params.page_size;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/TrustProducts/{TrustProductSid}/Evaluations", local_var_configuration.base_path, TrustProductSid=crate::apis::urlencode(trust_product_sid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = page_size {
        local_var_req_builder = local_var_req_builder.query(&[("PageSize", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<ListTrustProductEvaluationSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<ListTrustProductEvaluationError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Updates a Customer-Profile in an account.
pub async fn update_customer_profile(configuration: &configuration::Configuration, params: UpdateCustomerProfileParams) -> Result<ResponseContent<UpdateCustomerProfileSuccess>, Error<UpdateCustomerProfileError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let sid = params.sid;
    let email = params.email;
    let friendly_name = params.friendly_name;
    let status = params.status;
    let status_callback = params.status_callback;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/CustomerProfiles/{Sid}", local_var_configuration.base_path, Sid=crate::apis::urlencode(sid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    if let Some(local_var_param_value) = email {
        local_var_form_params.insert("Email", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = friendly_name {
        local_var_form_params.insert("FriendlyName", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = status {
        local_var_form_params.insert("Status", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = status_callback {
        local_var_form_params.insert("StatusCallback", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<UpdateCustomerProfileSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<UpdateCustomerProfileError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Update an existing End User.
pub async fn update_end_user(configuration: &configuration::Configuration, params: UpdateEndUserParams) -> Result<ResponseContent<UpdateEndUserSuccess>, Error<UpdateEndUserError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let sid = params.sid;
    let attributes = params.attributes;
    let friendly_name = params.friendly_name;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/EndUsers/{Sid}", local_var_configuration.base_path, Sid=crate::apis::urlencode(sid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    if let Some(local_var_param_value) = attributes {
        local_var_form_params.insert("Attributes", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = friendly_name {
        local_var_form_params.insert("FriendlyName", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<UpdateEndUserSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<UpdateEndUserError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Update an existing Supporting Document.
pub async fn update_supporting_document(configuration: &configuration::Configuration, params: UpdateSupportingDocumentParams) -> Result<ResponseContent<UpdateSupportingDocumentSuccess>, Error<UpdateSupportingDocumentError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let sid = params.sid;
    let attributes = params.attributes;
    let friendly_name = params.friendly_name;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/SupportingDocuments/{Sid}", local_var_configuration.base_path, Sid=crate::apis::urlencode(sid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    if let Some(local_var_param_value) = attributes {
        local_var_form_params.insert("Attributes", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = friendly_name {
        local_var_form_params.insert("FriendlyName", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<UpdateSupportingDocumentSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<UpdateSupportingDocumentError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Updates a Customer-Profile in an account.
pub async fn update_trust_product(configuration: &configuration::Configuration, params: UpdateTrustProductParams) -> Result<ResponseContent<UpdateTrustProductSuccess>, Error<UpdateTrustProductError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let sid = params.sid;
    let email = params.email;
    let friendly_name = params.friendly_name;
    let status = params.status;
    let status_callback = params.status_callback;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/TrustProducts/{Sid}", local_var_configuration.base_path, Sid=crate::apis::urlencode(sid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    if let Some(local_var_param_value) = email {
        local_var_form_params.insert("Email", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = friendly_name {
        local_var_form_params.insert("FriendlyName", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = status {
        local_var_form_params.insert("Status", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = status_callback {
        local_var_form_params.insert("StatusCallback", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<UpdateTrustProductSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<UpdateTrustProductError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

