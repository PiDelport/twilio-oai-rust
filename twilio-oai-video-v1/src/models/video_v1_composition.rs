/*
 * Twilio - Video
 *
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.20.3
 * Contact: support@twilio.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct VideoV1Composition {
    /// The SID of the Account that created the resource
    #[serde(rename = "account_sid", skip_serializing_if = "Option::is_none")]
    pub account_sid: Option<String>,
    /// The array of track names to include in the composition
    #[serde(rename = "audio_sources", skip_serializing_if = "Option::is_none")]
    pub audio_sources: Option<Vec<String>>,
    /// The array of track names to exclude from the composition
    #[serde(rename = "audio_sources_excluded", skip_serializing_if = "Option::is_none")]
    pub audio_sources_excluded: Option<Vec<String>>,
    /// The average bit rate of the composition's media
    #[serde(rename = "bitrate", skip_serializing_if = "Option::is_none")]
    pub bitrate: Option<i32>,
    /// Date when the media processing task finished
    #[serde(rename = "date_completed", skip_serializing_if = "Option::is_none")]
    pub date_completed: Option<String>,
    /// The ISO 8601 date and time in GMT when the resource was created
    #[serde(rename = "date_created", skip_serializing_if = "Option::is_none")]
    pub date_created: Option<String>,
    /// The ISO 8601 date and time in GMT when the composition generated media was deleted
    #[serde(rename = "date_deleted", skip_serializing_if = "Option::is_none")]
    pub date_deleted: Option<String>,
    /// The duration of the composition's media file in seconds
    #[serde(rename = "duration", skip_serializing_if = "Option::is_none")]
    pub duration: Option<i32>,
    /// The container format of the composition's media files as specified in the POST request that created the Composition resource
    #[serde(rename = "format", skip_serializing_if = "Option::is_none")]
    pub format: Option<Format>,
    /// The URL of the media file associated with the composition
    #[serde(rename = "links", skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
    /// The dimensions of the video image in pixels expressed as columns (width) and rows (height)
    #[serde(rename = "resolution", skip_serializing_if = "Option::is_none")]
    pub resolution: Option<String>,
    /// The SID of the Group Room that generated the audio and video tracks used in the composition
    #[serde(rename = "room_sid", skip_serializing_if = "Option::is_none")]
    pub room_sid: Option<String>,
    /// The unique string that identifies the resource
    #[serde(rename = "sid", skip_serializing_if = "Option::is_none")]
    pub sid: Option<String>,
    /// The size of the composed media file in bytes
    #[serde(rename = "size", skip_serializing_if = "Option::is_none")]
    pub size: Option<i32>,
    /// The status of the composition
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    /// Whether to remove intervals with no media
    #[serde(rename = "trim", skip_serializing_if = "Option::is_none")]
    pub trim: Option<bool>,
    /// The absolute URL of the resource
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    /// An object that describes the video layout of the composition
    #[serde(rename = "video_layout", skip_serializing_if = "Option::is_none")]
    pub video_layout: Option<serde_json::Value>,
}

impl VideoV1Composition {
    pub fn new() -> VideoV1Composition {
        VideoV1Composition {
            account_sid: None,
            audio_sources: None,
            audio_sources_excluded: None,
            bitrate: None,
            date_completed: None,
            date_created: None,
            date_deleted: None,
            duration: None,
            format: None,
            links: None,
            resolution: None,
            room_sid: None,
            sid: None,
            size: None,
            status: None,
            trim: None,
            url: None,
            video_layout: None,
        }
    }
}

/// The container format of the composition's media files as specified in the POST request that created the Composition resource
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Format {
    #[serde(rename = "mp4")]
    Mp4,
    #[serde(rename = "webm")]
    Webm,
}
/// The status of the composition
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "enqueued")]
    Enqueued,
    #[serde(rename = "processing")]
    Processing,
    #[serde(rename = "completed")]
    Completed,
    #[serde(rename = "deleted")]
    Deleted,
    #[serde(rename = "failed")]
    Failed,
}

