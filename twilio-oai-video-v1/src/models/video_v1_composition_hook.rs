/*
 * Twilio - Video
 *
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.20.3
 * Contact: support@twilio.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct VideoV1CompositionHook {
    /// The SID of the Account that created the resource
    #[serde(rename = "account_sid", skip_serializing_if = "Option::is_none")]
    pub account_sid: Option<String>,
    /// The array of track names to include in the compositions created by the composition hook
    #[serde(rename = "audio_sources", skip_serializing_if = "Option::is_none")]
    pub audio_sources: Option<Vec<String>>,
    /// The array of track names to exclude from the compositions created by the composition hook
    #[serde(rename = "audio_sources_excluded", skip_serializing_if = "Option::is_none")]
    pub audio_sources_excluded: Option<Vec<String>>,
    /// The ISO 8601 date and time in GMT when the resource was created
    #[serde(rename = "date_created", skip_serializing_if = "Option::is_none")]
    pub date_created: Option<String>,
    /// The ISO 8601 date and time in GMT when the resource was last updated
    #[serde(rename = "date_updated", skip_serializing_if = "Option::is_none")]
    pub date_updated: Option<String>,
    /// Whether the CompositionHook is active
    #[serde(rename = "enabled", skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The container format of the media files used by the compositions created by the composition hook
    #[serde(rename = "format", skip_serializing_if = "Option::is_none")]
    pub format: Option<Format>,
    /// The string that you assigned to describe the resource
    #[serde(rename = "friendly_name", skip_serializing_if = "Option::is_none")]
    pub friendly_name: Option<String>,
    /// The dimensions of the video image in pixels expressed as columns (width) and rows (height)
    #[serde(rename = "resolution", skip_serializing_if = "Option::is_none")]
    pub resolution: Option<String>,
    /// The unique string that identifies the resource
    #[serde(rename = "sid", skip_serializing_if = "Option::is_none")]
    pub sid: Option<String>,
    /// The URL to send status information to your application
    #[serde(rename = "status_callback", skip_serializing_if = "Option::is_none")]
    pub status_callback: Option<String>,
    /// The HTTP method we should use to call status_callback
    #[serde(rename = "status_callback_method", skip_serializing_if = "Option::is_none")]
    pub status_callback_method: Option<StatusCallbackMethod>,
    /// Whether intervals with no media are clipped
    #[serde(rename = "trim", skip_serializing_if = "Option::is_none")]
    pub trim: Option<bool>,
    /// The absolute URL of the resource
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    /// A JSON object that describes the video layout of the Composition
    #[serde(rename = "video_layout", skip_serializing_if = "Option::is_none")]
    pub video_layout: Option<serde_json::Value>,
}

impl VideoV1CompositionHook {
    pub fn new() -> VideoV1CompositionHook {
        VideoV1CompositionHook {
            account_sid: None,
            audio_sources: None,
            audio_sources_excluded: None,
            date_created: None,
            date_updated: None,
            enabled: None,
            format: None,
            friendly_name: None,
            resolution: None,
            sid: None,
            status_callback: None,
            status_callback_method: None,
            trim: None,
            url: None,
            video_layout: None,
        }
    }
}

/// The container format of the media files used by the compositions created by the composition hook
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Format {
    #[serde(rename = "mp4")]
    Mp4,
    #[serde(rename = "webm")]
    Webm,
}
/// The HTTP method we should use to call status_callback
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum StatusCallbackMethod {
    #[serde(rename = "HEAD")]
    HEAD,
    #[serde(rename = "GET")]
    GET,
    #[serde(rename = "POST")]
    POST,
    #[serde(rename = "PATCH")]
    PATCH,
    #[serde(rename = "PUT")]
    PUT,
    #[serde(rename = "DELETE")]
    DELETE,
}

